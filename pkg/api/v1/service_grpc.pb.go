// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceServiceClient is the client API for ServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServiceClient interface {
	// StartLocalInstance starts a Service Instance on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the service/config.yaml
	//   3. all bytes constituting the Instance YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalInstance(ctx context.Context, opts ...grpc.CallOption) (ServiceService_StartLocalInstanceClient, error)
	// StartFromPreviousInstance starts a new Instance based on a previous one.
	// If the previous Instance does not have the can-replay condition set this call will result in an error.
	StartFromPreviousInstance(ctx context.Context, in *StartFromPreviousInstanceRequest, opts ...grpc.CallOption) (*StartInstanceResponse, error)
	// StartInstanceRequest starts a new Instance based on its specification.
	StartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*StartInstanceResponse, error)
	// Searches for Instance(s) known to this instance
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// Subscribe listens to new Instance(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ServiceService_SubscribeClient, error)
	// GetInstance retrieves details of a single Instance
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// Listen listens to Instance updates and log output of a running Instance
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ServiceService_ListenClient, error)
	// StopInstance stops a currently running Instance
	StopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error)
}

type serviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServiceClient(cc grpc.ClientConnInterface) ServiceServiceClient {
	return &serviceServiceClient{cc}
}

func (c *serviceServiceClient) StartLocalInstance(ctx context.Context, opts ...grpc.CallOption) (ServiceService_StartLocalInstanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[0], "/v1.ServiceService/StartLocalInstance", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServiceStartLocalInstanceClient{stream}
	return x, nil
}

type ServiceService_StartLocalInstanceClient interface {
	Send(*StartLocalInstanceRequest) error
	CloseAndRecv() (*StartInstanceResponse, error)
	grpc.ClientStream
}

type serviceServiceStartLocalInstanceClient struct {
	grpc.ClientStream
}

func (x *serviceServiceStartLocalInstanceClient) Send(m *StartLocalInstanceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceServiceStartLocalInstanceClient) CloseAndRecv() (*StartInstanceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartInstanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceServiceClient) StartFromPreviousInstance(ctx context.Context, in *StartFromPreviousInstanceRequest, opts ...grpc.CallOption) (*StartInstanceResponse, error) {
	out := new(StartInstanceResponse)
	err := c.cc.Invoke(ctx, "/v1.ServiceService/StartFromPreviousInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) StartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*StartInstanceResponse, error) {
	out := new(StartInstanceResponse)
	err := c.cc.Invoke(ctx, "/v1.ServiceService/StartInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/v1.ServiceService/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ServiceService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[1], "/v1.ServiceService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type serviceServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *serviceServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, "/v1.ServiceService/GetInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ServiceService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceService_ServiceDesc.Streams[2], "/v1.ServiceService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type serviceServiceListenClient struct {
	grpc.ClientStream
}

func (x *serviceServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceServiceClient) StopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error) {
	out := new(StopInstanceResponse)
	err := c.cc.Invoke(ctx, "/v1.ServiceService/StopInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServiceServer is the server API for ServiceService service.
// All implementations must embed UnimplementedServiceServiceServer
// for forward compatibility
type ServiceServiceServer interface {
	// StartLocalInstance starts a Service Instance on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the service/config.yaml
	//   3. all bytes constituting the Instance YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalInstance(ServiceService_StartLocalInstanceServer) error
	// StartFromPreviousInstance starts a new Instance based on a previous one.
	// If the previous Instance does not have the can-replay condition set this call will result in an error.
	StartFromPreviousInstance(context.Context, *StartFromPreviousInstanceRequest) (*StartInstanceResponse, error)
	// StartInstanceRequest starts a new Instance based on its specification.
	StartInstance(context.Context, *StartInstanceRequest) (*StartInstanceResponse, error)
	// Searches for Instance(s) known to this instance
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// Subscribe listens to new Instance(s) updates
	Subscribe(*SubscribeRequest, ServiceService_SubscribeServer) error
	// GetInstance retrieves details of a single Instance
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// Listen listens to Instance updates and log output of a running Instance
	Listen(*ListenRequest, ServiceService_ListenServer) error
	// StopInstance stops a currently running Instance
	StopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error)
	mustEmbedUnimplementedServiceServiceServer()
}

// UnimplementedServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServiceServer struct {
}

func (UnimplementedServiceServiceServer) StartLocalInstance(ServiceService_StartLocalInstanceServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalInstance not implemented")
}
func (UnimplementedServiceServiceServer) StartFromPreviousInstance(context.Context, *StartFromPreviousInstanceRequest) (*StartInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousInstance not implemented")
}
func (UnimplementedServiceServiceServer) StartInstance(context.Context, *StartInstanceRequest) (*StartInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInstance not implemented")
}
func (UnimplementedServiceServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedServiceServiceServer) Subscribe(*SubscribeRequest, ServiceService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedServiceServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedServiceServiceServer) Listen(*ListenRequest, ServiceService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedServiceServiceServer) StopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInstance not implemented")
}
func (UnimplementedServiceServiceServer) mustEmbedUnimplementedServiceServiceServer() {}

// UnsafeServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServiceServer will
// result in compilation errors.
type UnsafeServiceServiceServer interface {
	mustEmbedUnimplementedServiceServiceServer()
}

func RegisterServiceServiceServer(s grpc.ServiceRegistrar, srv ServiceServiceServer) {
	s.RegisterService(&ServiceService_ServiceDesc, srv)
}

func _ServiceService_StartLocalInstance_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServiceServer).StartLocalInstance(&serviceServiceStartLocalInstanceServer{stream})
}

type ServiceService_StartLocalInstanceServer interface {
	SendAndClose(*StartInstanceResponse) error
	Recv() (*StartLocalInstanceRequest, error)
	grpc.ServerStream
}

type serviceServiceStartLocalInstanceServer struct {
	grpc.ServerStream
}

func (x *serviceServiceStartLocalInstanceServer) SendAndClose(m *StartInstanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceServiceStartLocalInstanceServer) Recv() (*StartLocalInstanceRequest, error) {
	m := new(StartLocalInstanceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceService_StartFromPreviousInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).StartFromPreviousInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServiceService/StartFromPreviousInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).StartFromPreviousInstance(ctx, req.(*StartFromPreviousInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_StartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).StartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServiceService/StartInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).StartInstance(ctx, req.(*StartInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServiceService/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).Subscribe(m, &serviceServiceSubscribeServer{stream})
}

type ServiceService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type serviceServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *serviceServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServiceService/GetInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServiceServer).Listen(m, &serviceServiceListenServer{stream})
}

type ServiceService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type serviceServiceListenServer struct {
	grpc.ServerStream
}

func (x *serviceServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceService_StopInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).StopInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServiceService/StopInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).StopInstance(ctx, req.(*StopInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceService_ServiceDesc is the grpc.ServiceDesc for ServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ServiceService",
	HandlerType: (*ServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousInstance",
			Handler:    _ServiceService_StartFromPreviousInstance_Handler,
		},
		{
			MethodName: "StartInstance",
			Handler:    _ServiceService_StartInstance_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _ServiceService_ListInstances_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _ServiceService_GetInstance_Handler,
		},
		{
			MethodName: "StopInstance",
			Handler:    _ServiceService_StopInstance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalInstance",
			Handler:       _ServiceService_StartLocalInstance_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ServiceService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _ServiceService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
