syntax = "proto3";

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// It contains the core Network Service API definitions for external consumption
// via gRPC protobufs.

package v1.network;

option go_package = "github.com/bhojpur/service/pkg/core/v1/network;network";

message IpNeighbor {
    string ip = 1;
    string hardware_address = 2;
}

message Route {
    string prefix = 1; /* destination address + prefix in format <address>/<prefix> */
    string nextHop = 2; /* nexthop ip address - if empty, presume {Src/Dst}IP of same address family
                           from the opposite end of the link */
}

message IpFamily {
    enum Family {
        IPV4 = 0;
        IPV6 = 1;
    }
    Family family = 1;
}

message ExtraPrefixRequest {
    IpFamily addr_family    = 1;
    uint32 prefix_len       = 2;
    uint32 required_number  = 3;
    uint32 requested_number = 4;
}

message PolicyRoute {
    string from  = 1; /* source ip address. This must be an IP that NSM has placed on the nsm interface or empty (in which case it applies to all IPs NSM puts on the interface */
    uint32 proto = 2; /* ip protocol number */
    uint32 port  = 3; /* destination port */
    repeated Route routes = 4; /* list of destination based routes, if empty becomes a default route, but only for things matching both from and proto */
}

message IPContext {
    repeated string src_ip_addrs = 1; /* source ip address + prefix in format <address>/<prefix> */
    repeated string dst_ip_addrs = 2; /* destination ip address + prefix in format <address>/<prefix> */

    bool src_ip_required = 3; /* if specified src_ip is required from NSE. */
    bool dst_ip_required = 4; /* if specified dst_ip is required from NSE */

    repeated Route src_routes = 5; /* a list of routes via src_ip_addr as gateway */
    repeated Route dst_routes = 6; /* a list of routes via dst_ip_addr as gateway */

    repeated string excluded_prefixes = 7; /* a list of excluded passed to NSE */

    repeated IpNeighbor ip_neighbors = 8; /* A lists of ARP table neighbours addresses */

    repeated ExtraPrefixRequest extra_prefix_request = 9; /* A request for NSE to provide extra prefixes */
    repeated string extra_prefixes = 10; /* A list of extra prefixes requested */

    repeated PolicyRoute policies = 11; /* A list of route policies */
}

message DNSConfig {
    /* ips of DNS Servers for this DNSConfig.  Any given IP may be IPv4 or IPv6 */
    repeated string dns_server_ips = 1;
    /* domains for which this DNSConfig provides resolution.  If empty, all domains. */
    repeated string search_domains = 2;
}

message DNSContext {
    repeated DNSConfig configs = 1;
}

message EthernetContext {
    string src_mac = 1;
    string dst_mac = 2;
    int32 vlan_tag = 3;
}

message ConnectionContext {
    IPContext ip_context = 1; /* IP related context */
    DNSContext dns_context = 2; /* DNS related context */
    EthernetContext ethernet_context = 3;
    map<string, string> extra_context = 4; /* a k,v map for transfering arbitrary information from an NSE to an NSC or dataplane */
    uint32 MTU = 5;
}