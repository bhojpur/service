syntax = "proto3";

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// It contains the core Network Service API definitions for external consumption
// via gRPC protobufs.

package v1.network;

import "google/protobuf/timestamp.proto";
import "pkg/core/v1/network/connectioncontext.proto";

option csharp_namespace = "network.Client.Autogen.Grpc";
option java_outer_classname = "NetworkProtos";
option java_package = "net.bhojpur.service";
option go_package = "github.com/bhojpur/service/pkg/core/v1/network;network";

message Mechanism {
  string cls = 1;
  string type = 2;
  map<string, string> parameters = 3;
}

enum State {
  UP = 0;
  DOWN = 1;
}

message PathSegment {
  string name      = 1;
  string id        = 2;
  string token = 3;
  google.protobuf.Timestamp expires = 4;
  map<string, string> metrics = 5;
}
message Path {
  uint32 index = 1;
  repeated PathSegment path_segments = 2;
}

message Connection {
  string id = 1;
  string network_service = 2;
  Mechanism mechanism = 3;
  v1.network.ConnectionContext context = 4;
  map<string, string> labels = 5;
  Path path = 6;
  string network_service_endpoint_name = 7;
  string payload = 8;
  State state = 9;
}

enum ConnectionEventType {
  INITIAL_STATE_TRANSFER = 0;
  UPDATE = 1;
  DELETE = 2;
}

message ConnectionEvent {
  ConnectionEventType type = 1;
  map<string, Connection> connections = 2;
}

message MonitorScopeSelector {
  repeated PathSegment path_segments = 1;
}

service MonitorConnection {
  rpc MonitorConnections(MonitorScopeSelector) returns (stream ConnectionEvent);
}