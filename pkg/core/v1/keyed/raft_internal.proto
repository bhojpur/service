syntax = "proto3";

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package v1.keyed;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "pkg/core/v1/keyed/keyedserver.proto";
import "pkg/core/v1/keyed/rpc.proto";
import "pkg/core/v1/version/version.proto";
import "pkg/core/v1/membership/membership.proto";

option go_package = "github.com/bhojpur/service/pkg/core/v1/keyed;keyed";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

message RequestHeader {
  option (v1.version.keyed_version_msg) = "1.0";

  uint64 ID = 1;
  // username is a username that is associated with an auth token of gRPC connection
  string username = 2;
  // auth_revision is a revision number of auth.authStore. It is not related to mvcc
  uint64 auth_revision = 3 [(v1.version.keyed_version_field) = "1.1"];
}

// An InternalRaftRequest is the union of all requests which can be
// sent via Raft consensus platform.
message InternalRaftRequest {
  option (v1.version.keyed_version_msg) = "1.0";

  RequestHeader header = 100;
  uint64 ID = 1;

  Request v2 = 2;

  RangeRequest range = 3;
  PutRequest put = 4;
  DeleteRangeRequest delete_range = 5;
  TxnRequest txn = 6;
  CompactionRequest compaction = 7;

  LeaseGrantRequest lease_grant = 8;
  LeaseRevokeRequest lease_revoke = 9;

  AlarmRequest alarm = 10;

  LeaseCheckpointRequest lease_checkpoint = 11 [(v1.version.keyed_version_field) = "1.0"];

  AuthEnableRequest auth_enable = 1000;
  AuthDisableRequest auth_disable = 1011;
  AuthStatusRequest auth_status = 1013 [(v1.version.keyed_version_field) = "1.0"];

  InternalAuthenticateRequest authenticate = 1012;

  AuthUserAddRequest auth_user_add = 1100;
  AuthUserDeleteRequest auth_user_delete = 1101;
  AuthUserGetRequest auth_user_get = 1102;
  AuthUserChangePasswordRequest auth_user_change_password = 1103;
  AuthUserGrantRoleRequest auth_user_grant_role = 1104;
  AuthUserRevokeRoleRequest auth_user_revoke_role = 1105;
  AuthUserListRequest auth_user_list = 1106;
  AuthRoleListRequest auth_role_list = 1107;

  AuthRoleAddRequest auth_role_add = 1200;
  AuthRoleDeleteRequest auth_role_delete = 1201;
  AuthRoleGetRequest auth_role_get = 1202;
  AuthRoleGrantPermissionRequest auth_role_grant_permission = 1203;
  AuthRoleRevokePermissionRequest auth_role_revoke_permission = 1204;

  v1.membership.ClusterVersionSetRequest cluster_version_set = 1300 [(v1.version.keyed_version_field) = "1.0"];
  v1.membership.ClusterMemberAttrSetRequest cluster_member_attr_set = 1301 [(v1.version.keyed_version_field) = "1.0"];
  v1.membership.DowngradeInfoSetRequest  downgrade_info_set = 1302 [(v1.version.keyed_version_field) = "1.0"];
}

message EmptyResponse {
}

// What is the difference between AuthenticateRequest (defined in rpc.proto) and InternalAuthenticateRequest?
// InternalAuthenticateRequest has a member that is filled by Keyed DB server and shouldn't be user-facing.
// For avoiding misusage the field, we have an internal version of AuthenticateRequest.
message InternalAuthenticateRequest {
  option (v1.version.keyed_version_msg) = "1.0";
  string name = 1;
  string password = 2;

  // simple_token is generated in Keyed DB API layer (keyedserver/v1_server.go)
  string simple_token = 3;
}