// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: pkg/core/v1/keyed/rpc.proto

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package keyed

import (
	auth "github.com/bhojpur/service/pkg/core/v1/auth"
	mvcc "github.com/bhojpur/service/pkg/core/v1/mvcc"
	_ "github.com/bhojpur/service/pkg/core/v1/version"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlarmType int32

const (
	AlarmType_NONE    AlarmType = 0 // default, used to query if any alarm is active
	AlarmType_NOSPACE AlarmType = 1 // space quota is exhausted
	AlarmType_CORRUPT AlarmType = 2 // kv store corruption detected
)

// Enum value maps for AlarmType.
var (
	AlarmType_name = map[int32]string{
		0: "NONE",
		1: "NOSPACE",
		2: "CORRUPT",
	}
	AlarmType_value = map[string]int32{
		"NONE":    0,
		"NOSPACE": 1,
		"CORRUPT": 2,
	}
)

func (x AlarmType) Enum() *AlarmType {
	p := new(AlarmType)
	*p = x
	return p
}

func (x AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[0].Descriptor()
}

func (AlarmType) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[0]
}

func (x AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmType.Descriptor instead.
func (AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{0}
}

type RangeRequest_SortOrder int32

const (
	RangeRequest_NONE    RangeRequest_SortOrder = 0 // default, no sorting
	RangeRequest_ASCEND  RangeRequest_SortOrder = 1 // lowest target value first
	RangeRequest_DESCEND RangeRequest_SortOrder = 2 // highest target value first
)

// Enum value maps for RangeRequest_SortOrder.
var (
	RangeRequest_SortOrder_name = map[int32]string{
		0: "NONE",
		1: "ASCEND",
		2: "DESCEND",
	}
	RangeRequest_SortOrder_value = map[string]int32{
		"NONE":    0,
		"ASCEND":  1,
		"DESCEND": 2,
	}
)

func (x RangeRequest_SortOrder) Enum() *RangeRequest_SortOrder {
	p := new(RangeRequest_SortOrder)
	*p = x
	return p
}

func (x RangeRequest_SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeRequest_SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[1].Descriptor()
}

func (RangeRequest_SortOrder) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[1]
}

func (x RangeRequest_SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeRequest_SortOrder.Descriptor instead.
func (RangeRequest_SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{1, 0}
}

type RangeRequest_SortTarget int32

const (
	RangeRequest_KEY     RangeRequest_SortTarget = 0
	RangeRequest_VERSION RangeRequest_SortTarget = 1
	RangeRequest_CREATE  RangeRequest_SortTarget = 2
	RangeRequest_MOD     RangeRequest_SortTarget = 3
	RangeRequest_VALUE   RangeRequest_SortTarget = 4
)

// Enum value maps for RangeRequest_SortTarget.
var (
	RangeRequest_SortTarget_name = map[int32]string{
		0: "KEY",
		1: "VERSION",
		2: "CREATE",
		3: "MOD",
		4: "VALUE",
	}
	RangeRequest_SortTarget_value = map[string]int32{
		"KEY":     0,
		"VERSION": 1,
		"CREATE":  2,
		"MOD":     3,
		"VALUE":   4,
	}
)

func (x RangeRequest_SortTarget) Enum() *RangeRequest_SortTarget {
	p := new(RangeRequest_SortTarget)
	*p = x
	return p
}

func (x RangeRequest_SortTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeRequest_SortTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[2].Descriptor()
}

func (RangeRequest_SortTarget) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[2]
}

func (x RangeRequest_SortTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeRequest_SortTarget.Descriptor instead.
func (RangeRequest_SortTarget) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{1, 1}
}

type Compare_CompareResult int32

const (
	Compare_EQUAL     Compare_CompareResult = 0
	Compare_GREATER   Compare_CompareResult = 1
	Compare_LESS      Compare_CompareResult = 2
	Compare_NOT_EQUAL Compare_CompareResult = 3
)

// Enum value maps for Compare_CompareResult.
var (
	Compare_CompareResult_name = map[int32]string{
		0: "EQUAL",
		1: "GREATER",
		2: "LESS",
		3: "NOT_EQUAL",
	}
	Compare_CompareResult_value = map[string]int32{
		"EQUAL":     0,
		"GREATER":   1,
		"LESS":      2,
		"NOT_EQUAL": 3,
	}
)

func (x Compare_CompareResult) Enum() *Compare_CompareResult {
	p := new(Compare_CompareResult)
	*p = x
	return p
}

func (x Compare_CompareResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compare_CompareResult) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[3].Descriptor()
}

func (Compare_CompareResult) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[3]
}

func (x Compare_CompareResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compare_CompareResult.Descriptor instead.
func (Compare_CompareResult) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{9, 0}
}

type Compare_CompareTarget int32

const (
	Compare_VERSION Compare_CompareTarget = 0
	Compare_CREATE  Compare_CompareTarget = 1
	Compare_MOD     Compare_CompareTarget = 2
	Compare_VALUE   Compare_CompareTarget = 3
	Compare_LEASE   Compare_CompareTarget = 4
)

// Enum value maps for Compare_CompareTarget.
var (
	Compare_CompareTarget_name = map[int32]string{
		0: "VERSION",
		1: "CREATE",
		2: "MOD",
		3: "VALUE",
		4: "LEASE",
	}
	Compare_CompareTarget_value = map[string]int32{
		"VERSION": 0,
		"CREATE":  1,
		"MOD":     2,
		"VALUE":   3,
		"LEASE":   4,
	}
)

func (x Compare_CompareTarget) Enum() *Compare_CompareTarget {
	p := new(Compare_CompareTarget)
	*p = x
	return p
}

func (x Compare_CompareTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compare_CompareTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[4].Descriptor()
}

func (Compare_CompareTarget) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[4]
}

func (x Compare_CompareTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compare_CompareTarget.Descriptor instead.
func (Compare_CompareTarget) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{9, 1}
}

type WatchCreateRequest_FilterType int32

const (
	// filter out put event.
	WatchCreateRequest_NOPUT WatchCreateRequest_FilterType = 0
	// filter out delete event.
	WatchCreateRequest_NODELETE WatchCreateRequest_FilterType = 1
)

// Enum value maps for WatchCreateRequest_FilterType.
var (
	WatchCreateRequest_FilterType_name = map[int32]string{
		0: "NOPUT",
		1: "NODELETE",
	}
	WatchCreateRequest_FilterType_value = map[string]int32{
		"NOPUT":    0,
		"NODELETE": 1,
	}
)

func (x WatchCreateRequest_FilterType) Enum() *WatchCreateRequest_FilterType {
	p := new(WatchCreateRequest_FilterType)
	*p = x
	return p
}

func (x WatchCreateRequest_FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchCreateRequest_FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[5].Descriptor()
}

func (WatchCreateRequest_FilterType) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[5]
}

func (x WatchCreateRequest_FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchCreateRequest_FilterType.Descriptor instead.
func (WatchCreateRequest_FilterType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{21, 0}
}

type AlarmRequest_AlarmAction int32

const (
	AlarmRequest_GET        AlarmRequest_AlarmAction = 0
	AlarmRequest_ACTIVATE   AlarmRequest_AlarmAction = 1
	AlarmRequest_DEACTIVATE AlarmRequest_AlarmAction = 2
)

// Enum value maps for AlarmRequest_AlarmAction.
var (
	AlarmRequest_AlarmAction_name = map[int32]string{
		0: "GET",
		1: "ACTIVATE",
		2: "DEACTIVATE",
	}
	AlarmRequest_AlarmAction_value = map[string]int32{
		"GET":        0,
		"ACTIVATE":   1,
		"DEACTIVATE": 2,
	}
)

func (x AlarmRequest_AlarmAction) Enum() *AlarmRequest_AlarmAction {
	p := new(AlarmRequest_AlarmAction)
	*p = x
	return p
}

func (x AlarmRequest_AlarmAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmRequest_AlarmAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[6].Descriptor()
}

func (AlarmRequest_AlarmAction) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[6]
}

func (x AlarmRequest_AlarmAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmRequest_AlarmAction.Descriptor instead.
func (AlarmRequest_AlarmAction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{54, 0}
}

type DowngradeRequest_DowngradeAction int32

const (
	DowngradeRequest_VALIDATE DowngradeRequest_DowngradeAction = 0
	DowngradeRequest_ENABLE   DowngradeRequest_DowngradeAction = 1
	DowngradeRequest_CANCEL   DowngradeRequest_DowngradeAction = 2
)

// Enum value maps for DowngradeRequest_DowngradeAction.
var (
	DowngradeRequest_DowngradeAction_name = map[int32]string{
		0: "VALIDATE",
		1: "ENABLE",
		2: "CANCEL",
	}
	DowngradeRequest_DowngradeAction_value = map[string]int32{
		"VALIDATE": 0,
		"ENABLE":   1,
		"CANCEL":   2,
	}
)

func (x DowngradeRequest_DowngradeAction) Enum() *DowngradeRequest_DowngradeAction {
	p := new(DowngradeRequest_DowngradeAction)
	*p = x
	return p
}

func (x DowngradeRequest_DowngradeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DowngradeRequest_DowngradeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_core_v1_keyed_rpc_proto_enumTypes[7].Descriptor()
}

func (DowngradeRequest_DowngradeAction) Type() protoreflect.EnumType {
	return &file_pkg_core_v1_keyed_rpc_proto_enumTypes[7]
}

func (x DowngradeRequest_DowngradeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DowngradeRequest_DowngradeAction.Descriptor instead.
func (DowngradeRequest_DowngradeAction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{57, 0}
}

type ResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is the ID of the cluster which sent the response.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// member_id is the ID of the member which sent the response.
	MemberId uint64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// revision is the key-value store revision when the request was applied.
	// For watch progress responses, the header.revision indicates progress. All future events
	// received in this stream are guaranteed to have a higher revision number than the
	// header.revision number.
	Revision int64 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// raft_term is the raft term when the request was applied.
	RaftTerm uint64 `protobuf:"varint,4,opt,name=raft_term,json=raftTerm,proto3" json:"raft_term,omitempty"`
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseHeader) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ResponseHeader) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ResponseHeader) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *ResponseHeader) GetRaftTerm() uint64 {
	if x != nil {
		return x.RaftTerm
	}
	return 0
}

type RangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the first key for the range. If range_end is not given, the request only looks up key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// range_end is the upper bound on the requested range [key, range_end).
	// If range_end is '\0', the range is all keys >= key.
	// If range_end is key plus one (e.g., "aa"+1 == "ab", "a\xff"+1 == "b"),
	// then the range request gets all keys prefixed with key.
	// If both key and range_end are '\0', then the range request returns all keys.
	RangeEnd []byte `protobuf:"bytes,2,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	// limit is a limit on the number of keys returned for the request. When limit is set to 0,
	// it is treated as no limit.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// revision is the point-in-time of the key-value store to use for the range.
	// If revision is less or equal to zero, the range is over the newest key-value store.
	// If the revision has been compacted, ErrCompacted is returned as a response.
	Revision int64 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
	// sort_order is the order for returned sorted results.
	SortOrder RangeRequest_SortOrder `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3,enum=v1.keyed.RangeRequest_SortOrder" json:"sort_order,omitempty"`
	// sort_target is the key-value field to use for sorting.
	SortTarget RangeRequest_SortTarget `protobuf:"varint,6,opt,name=sort_target,json=sortTarget,proto3,enum=v1.keyed.RangeRequest_SortTarget" json:"sort_target,omitempty"`
	// serializable sets the range request to use serializable member-local reads.
	// Range requests are linearizable by default; linearizable requests have higher
	// latency and lower throughput than serializable requests but reflect the current
	// consensus of the cluster. For better performance, in exchange for possible stale reads,
	// a serializable range request is served locally without needing to reach consensus
	// with other nodes in the cluster.
	Serializable bool `protobuf:"varint,7,opt,name=serializable,proto3" json:"serializable,omitempty"`
	// keys_only when set returns only the keys and not the values.
	KeysOnly bool `protobuf:"varint,8,opt,name=keys_only,json=keysOnly,proto3" json:"keys_only,omitempty"`
	// count_only when set returns only the count of the keys in the range.
	CountOnly bool `protobuf:"varint,9,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
	// min_mod_revision is the lower bound for returned key mod revisions; all keys with
	// lesser mod revisions will be filtered away.
	MinModRevision int64 `protobuf:"varint,10,opt,name=min_mod_revision,json=minModRevision,proto3" json:"min_mod_revision,omitempty"`
	// max_mod_revision is the upper bound for returned key mod revisions; all keys with
	// greater mod revisions will be filtered away.
	MaxModRevision int64 `protobuf:"varint,11,opt,name=max_mod_revision,json=maxModRevision,proto3" json:"max_mod_revision,omitempty"`
	// min_create_revision is the lower bound for returned key create revisions; all keys with
	// lesser create revisions will be filtered away.
	MinCreateRevision int64 `protobuf:"varint,12,opt,name=min_create_revision,json=minCreateRevision,proto3" json:"min_create_revision,omitempty"`
	// max_create_revision is the upper bound for returned key create revisions; all keys with
	// greater create revisions will be filtered away.
	MaxCreateRevision int64 `protobuf:"varint,13,opt,name=max_create_revision,json=maxCreateRevision,proto3" json:"max_create_revision,omitempty"`
}

func (x *RangeRequest) Reset() {
	*x = RangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeRequest) ProtoMessage() {}

func (x *RangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeRequest.ProtoReflect.Descriptor instead.
func (*RangeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *RangeRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RangeRequest) GetRangeEnd() []byte {
	if x != nil {
		return x.RangeEnd
	}
	return nil
}

func (x *RangeRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RangeRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *RangeRequest) GetSortOrder() RangeRequest_SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return RangeRequest_NONE
}

func (x *RangeRequest) GetSortTarget() RangeRequest_SortTarget {
	if x != nil {
		return x.SortTarget
	}
	return RangeRequest_KEY
}

func (x *RangeRequest) GetSerializable() bool {
	if x != nil {
		return x.Serializable
	}
	return false
}

func (x *RangeRequest) GetKeysOnly() bool {
	if x != nil {
		return x.KeysOnly
	}
	return false
}

func (x *RangeRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

func (x *RangeRequest) GetMinModRevision() int64 {
	if x != nil {
		return x.MinModRevision
	}
	return 0
}

func (x *RangeRequest) GetMaxModRevision() int64 {
	if x != nil {
		return x.MaxModRevision
	}
	return 0
}

func (x *RangeRequest) GetMinCreateRevision() int64 {
	if x != nil {
		return x.MinCreateRevision
	}
	return 0
}

func (x *RangeRequest) GetMaxCreateRevision() int64 {
	if x != nil {
		return x.MaxCreateRevision
	}
	return 0
}

type RangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// kvs is the list of key-value pairs matched by the range request.
	// kvs is empty when count is requested.
	Kvs []*mvcc.KeyValue `protobuf:"bytes,2,rep,name=kvs,proto3" json:"kvs,omitempty"`
	// more indicates if there are more keys to return in the requested range.
	More bool `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`
	// count is set to the number of keys within the range when requested.
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RangeResponse) Reset() {
	*x = RangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeResponse) ProtoMessage() {}

func (x *RangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeResponse.ProtoReflect.Descriptor instead.
func (*RangeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *RangeResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RangeResponse) GetKvs() []*mvcc.KeyValue {
	if x != nil {
		return x.Kvs
	}
	return nil
}

func (x *RangeResponse) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *RangeResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the key, in bytes, to put into the Keyed DB key-value store.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the value, in bytes, to associate with the key in the key-value store.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// lease is the lease ID to associate with the key in the key-value store. A lease
	// value of 0 indicates no lease.
	Lease int64 `protobuf:"varint,3,opt,name=lease,proto3" json:"lease,omitempty"`
	// If prev_kv is set, keyed gets the previous key-value pair before changing it.
	// The previous key-value pair will be returned in the put response.
	PrevKv bool `protobuf:"varint,4,opt,name=prev_kv,json=prevKv,proto3" json:"prev_kv,omitempty"`
	// If ignore_value is set, keyed updates the key using its current value.
	// Returns an error if the key does not exist.
	IgnoreValue bool `protobuf:"varint,5,opt,name=ignore_value,json=ignoreValue,proto3" json:"ignore_value,omitempty"`
	// If ignore_lease is set, keyed updates the key using its current lease.
	// Returns an error if the key does not exist.
	IgnoreLease bool `protobuf:"varint,6,opt,name=ignore_lease,json=ignoreLease,proto3" json:"ignore_lease,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *PutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutRequest) GetLease() int64 {
	if x != nil {
		return x.Lease
	}
	return 0
}

func (x *PutRequest) GetPrevKv() bool {
	if x != nil {
		return x.PrevKv
	}
	return false
}

func (x *PutRequest) GetIgnoreValue() bool {
	if x != nil {
		return x.IgnoreValue
	}
	return false
}

func (x *PutRequest) GetIgnoreLease() bool {
	if x != nil {
		return x.IgnoreLease
	}
	return false
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// if prev_kv is set in the request, the previous key-value pair will be returned.
	PrevKv *mvcc.KeyValue `protobuf:"bytes,2,opt,name=prev_kv,json=prevKv,proto3" json:"prev_kv,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *PutResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PutResponse) GetPrevKv() *mvcc.KeyValue {
	if x != nil {
		return x.PrevKv
	}
	return nil
}

type DeleteRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the first key to delete in the range.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// range_end is the key following the last key to delete for the range [key, range_end).
	// If range_end is not given, the range is defined to contain only the key argument.
	// If range_end is one bit larger than the given key, then the range is all the keys
	// with the prefix (the given key).
	// If range_end is '\0', the range is all keys greater than or equal to the key argument.
	RangeEnd []byte `protobuf:"bytes,2,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	// If prev_kv is set, keyed gets the previous key-value pairs before deleting it.
	// The previous key-value pairs will be returned in the delete response.
	PrevKv bool `protobuf:"varint,3,opt,name=prev_kv,json=prevKv,proto3" json:"prev_kv,omitempty"`
}

func (x *DeleteRangeRequest) Reset() {
	*x = DeleteRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRangeRequest) ProtoMessage() {}

func (x *DeleteRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRangeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRangeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRangeRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeleteRangeRequest) GetRangeEnd() []byte {
	if x != nil {
		return x.RangeEnd
	}
	return nil
}

func (x *DeleteRangeRequest) GetPrevKv() bool {
	if x != nil {
		return x.PrevKv
	}
	return false
}

type DeleteRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// deleted is the number of keys deleted by the delete range request.
	Deleted int64 `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// if prev_kv is set in the request, the previous key-value pairs will be returned.
	PrevKvs []*mvcc.KeyValue `protobuf:"bytes,3,rep,name=prev_kvs,json=prevKvs,proto3" json:"prev_kvs,omitempty"`
}

func (x *DeleteRangeResponse) Reset() {
	*x = DeleteRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRangeResponse) ProtoMessage() {}

func (x *DeleteRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRangeResponse.ProtoReflect.Descriptor instead.
func (*DeleteRangeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRangeResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteRangeResponse) GetDeleted() int64 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *DeleteRangeResponse) GetPrevKvs() []*mvcc.KeyValue {
	if x != nil {
		return x.PrevKvs
	}
	return nil
}

type RequestOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request is a union of request types accepted by a transaction.
	//
	// Types that are assignable to Request:
	//	*RequestOp_RequestRange
	//	*RequestOp_RequestPut
	//	*RequestOp_RequestDeleteRange
	//	*RequestOp_RequestTxn
	Request isRequestOp_Request `protobuf_oneof:"request"`
}

func (x *RequestOp) Reset() {
	*x = RequestOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOp) ProtoMessage() {}

func (x *RequestOp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOp.ProtoReflect.Descriptor instead.
func (*RequestOp) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{7}
}

func (m *RequestOp) GetRequest() isRequestOp_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RequestOp) GetRequestRange() *RangeRequest {
	if x, ok := x.GetRequest().(*RequestOp_RequestRange); ok {
		return x.RequestRange
	}
	return nil
}

func (x *RequestOp) GetRequestPut() *PutRequest {
	if x, ok := x.GetRequest().(*RequestOp_RequestPut); ok {
		return x.RequestPut
	}
	return nil
}

func (x *RequestOp) GetRequestDeleteRange() *DeleteRangeRequest {
	if x, ok := x.GetRequest().(*RequestOp_RequestDeleteRange); ok {
		return x.RequestDeleteRange
	}
	return nil
}

func (x *RequestOp) GetRequestTxn() *TxnRequest {
	if x, ok := x.GetRequest().(*RequestOp_RequestTxn); ok {
		return x.RequestTxn
	}
	return nil
}

type isRequestOp_Request interface {
	isRequestOp_Request()
}

type RequestOp_RequestRange struct {
	RequestRange *RangeRequest `protobuf:"bytes,1,opt,name=request_range,json=requestRange,proto3,oneof"`
}

type RequestOp_RequestPut struct {
	RequestPut *PutRequest `protobuf:"bytes,2,opt,name=request_put,json=requestPut,proto3,oneof"`
}

type RequestOp_RequestDeleteRange struct {
	RequestDeleteRange *DeleteRangeRequest `protobuf:"bytes,3,opt,name=request_delete_range,json=requestDeleteRange,proto3,oneof"`
}

type RequestOp_RequestTxn struct {
	RequestTxn *TxnRequest `protobuf:"bytes,4,opt,name=request_txn,json=requestTxn,proto3,oneof"`
}

func (*RequestOp_RequestRange) isRequestOp_Request() {}

func (*RequestOp_RequestPut) isRequestOp_Request() {}

func (*RequestOp_RequestDeleteRange) isRequestOp_Request() {}

func (*RequestOp_RequestTxn) isRequestOp_Request() {}

type ResponseOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// response is a union of response types returned by a transaction.
	//
	// Types that are assignable to Response:
	//	*ResponseOp_ResponseRange
	//	*ResponseOp_ResponsePut
	//	*ResponseOp_ResponseDeleteRange
	//	*ResponseOp_ResponseTxn
	Response isResponseOp_Response `protobuf_oneof:"response"`
}

func (x *ResponseOp) Reset() {
	*x = ResponseOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOp) ProtoMessage() {}

func (x *ResponseOp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOp.ProtoReflect.Descriptor instead.
func (*ResponseOp) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{8}
}

func (m *ResponseOp) GetResponse() isResponseOp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ResponseOp) GetResponseRange() *RangeResponse {
	if x, ok := x.GetResponse().(*ResponseOp_ResponseRange); ok {
		return x.ResponseRange
	}
	return nil
}

func (x *ResponseOp) GetResponsePut() *PutResponse {
	if x, ok := x.GetResponse().(*ResponseOp_ResponsePut); ok {
		return x.ResponsePut
	}
	return nil
}

func (x *ResponseOp) GetResponseDeleteRange() *DeleteRangeResponse {
	if x, ok := x.GetResponse().(*ResponseOp_ResponseDeleteRange); ok {
		return x.ResponseDeleteRange
	}
	return nil
}

func (x *ResponseOp) GetResponseTxn() *TxnResponse {
	if x, ok := x.GetResponse().(*ResponseOp_ResponseTxn); ok {
		return x.ResponseTxn
	}
	return nil
}

type isResponseOp_Response interface {
	isResponseOp_Response()
}

type ResponseOp_ResponseRange struct {
	ResponseRange *RangeResponse `protobuf:"bytes,1,opt,name=response_range,json=responseRange,proto3,oneof"`
}

type ResponseOp_ResponsePut struct {
	ResponsePut *PutResponse `protobuf:"bytes,2,opt,name=response_put,json=responsePut,proto3,oneof"`
}

type ResponseOp_ResponseDeleteRange struct {
	ResponseDeleteRange *DeleteRangeResponse `protobuf:"bytes,3,opt,name=response_delete_range,json=responseDeleteRange,proto3,oneof"`
}

type ResponseOp_ResponseTxn struct {
	ResponseTxn *TxnResponse `protobuf:"bytes,4,opt,name=response_txn,json=responseTxn,proto3,oneof"`
}

func (*ResponseOp_ResponseRange) isResponseOp_Response() {}

func (*ResponseOp_ResponsePut) isResponseOp_Response() {}

func (*ResponseOp_ResponseDeleteRange) isResponseOp_Response() {}

func (*ResponseOp_ResponseTxn) isResponseOp_Response() {}

type Compare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is logical comparison operation for this comparison.
	Result Compare_CompareResult `protobuf:"varint,1,opt,name=result,proto3,enum=v1.keyed.Compare_CompareResult" json:"result,omitempty"`
	// target is the key-value field to inspect for the comparison.
	Target Compare_CompareTarget `protobuf:"varint,2,opt,name=target,proto3,enum=v1.keyed.Compare_CompareTarget" json:"target,omitempty"`
	// key is the subject key for the comparison operation.
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to TargetUnion:
	//	*Compare_Version
	//	*Compare_CreateRevision
	//	*Compare_ModRevision
	//	*Compare_Value
	//	*Compare_Lease
	TargetUnion isCompare_TargetUnion `protobuf_oneof:"target_union"`
	// range_end compares the given target to all keys in the range [key, range_end).
	// See RangeRequest for more details on key ranges.
	RangeEnd []byte `protobuf:"bytes,64,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"` // TODO: fill out with most of the rest of RangeRequest fields when needed.
}

func (x *Compare) Reset() {
	*x = Compare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compare) ProtoMessage() {}

func (x *Compare) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compare.ProtoReflect.Descriptor instead.
func (*Compare) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *Compare) GetResult() Compare_CompareResult {
	if x != nil {
		return x.Result
	}
	return Compare_EQUAL
}

func (x *Compare) GetTarget() Compare_CompareTarget {
	if x != nil {
		return x.Target
	}
	return Compare_VERSION
}

func (x *Compare) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (m *Compare) GetTargetUnion() isCompare_TargetUnion {
	if m != nil {
		return m.TargetUnion
	}
	return nil
}

func (x *Compare) GetVersion() int64 {
	if x, ok := x.GetTargetUnion().(*Compare_Version); ok {
		return x.Version
	}
	return 0
}

func (x *Compare) GetCreateRevision() int64 {
	if x, ok := x.GetTargetUnion().(*Compare_CreateRevision); ok {
		return x.CreateRevision
	}
	return 0
}

func (x *Compare) GetModRevision() int64 {
	if x, ok := x.GetTargetUnion().(*Compare_ModRevision); ok {
		return x.ModRevision
	}
	return 0
}

func (x *Compare) GetValue() []byte {
	if x, ok := x.GetTargetUnion().(*Compare_Value); ok {
		return x.Value
	}
	return nil
}

func (x *Compare) GetLease() int64 {
	if x, ok := x.GetTargetUnion().(*Compare_Lease); ok {
		return x.Lease
	}
	return 0
}

func (x *Compare) GetRangeEnd() []byte {
	if x != nil {
		return x.RangeEnd
	}
	return nil
}

type isCompare_TargetUnion interface {
	isCompare_TargetUnion()
}

type Compare_Version struct {
	// version is the version of the given key
	Version int64 `protobuf:"varint,4,opt,name=version,proto3,oneof"`
}

type Compare_CreateRevision struct {
	// create_revision is the creation revision of the given key
	CreateRevision int64 `protobuf:"varint,5,opt,name=create_revision,json=createRevision,proto3,oneof"`
}

type Compare_ModRevision struct {
	// mod_revision is the last modified revision of the given key.
	ModRevision int64 `protobuf:"varint,6,opt,name=mod_revision,json=modRevision,proto3,oneof"`
}

type Compare_Value struct {
	// value is the value of the given key, in bytes.
	Value []byte `protobuf:"bytes,7,opt,name=value,proto3,oneof"`
}

type Compare_Lease struct {
	// lease is the lease id of the given key.
	Lease int64 `protobuf:"varint,8,opt,name=lease,proto3,oneof"` // leave room for more target_union field tags, jump to 64
}

func (*Compare_Version) isCompare_TargetUnion() {}

func (*Compare_CreateRevision) isCompare_TargetUnion() {}

func (*Compare_ModRevision) isCompare_TargetUnion() {}

func (*Compare_Value) isCompare_TargetUnion() {}

func (*Compare_Lease) isCompare_TargetUnion() {}

// From Google's PaxosDB paper:
// Our implementation hinges around a powerful primitive which we call MultiOp. All other database
// operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
// and consists of three components:
// 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
// for the absence or presence of a value, or compare with a given value. Two different tests in the guard
// may apply to the same or different entries in the database. All tests in the guard are applied and
// MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
// it executes f op (see item 3 below).
// 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
// lookup operation, and applies to a single database entry. Two different operations in the list may apply
// to the same or different entries in the database. These operations are executed
// if guard evaluates to
// true.
// 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
type TxnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// compare is a list of predicates representing a conjunction of terms.
	// If the comparisons succeed, then the success requests will be processed in order,
	// and the response will contain their respective responses in order.
	// If the comparisons fail, then the failure requests will be processed in order,
	// and the response will contain their respective responses in order.
	Compare []*Compare `protobuf:"bytes,1,rep,name=compare,proto3" json:"compare,omitempty"`
	// success is a list of requests which will be applied when compare evaluates to true.
	Success []*RequestOp `protobuf:"bytes,2,rep,name=success,proto3" json:"success,omitempty"`
	// failure is a list of requests which will be applied when compare evaluates to false.
	Failure []*RequestOp `protobuf:"bytes,3,rep,name=failure,proto3" json:"failure,omitempty"`
}

func (x *TxnRequest) Reset() {
	*x = TxnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnRequest) ProtoMessage() {}

func (x *TxnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnRequest.ProtoReflect.Descriptor instead.
func (*TxnRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *TxnRequest) GetCompare() []*Compare {
	if x != nil {
		return x.Compare
	}
	return nil
}

func (x *TxnRequest) GetSuccess() []*RequestOp {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *TxnRequest) GetFailure() []*RequestOp {
	if x != nil {
		return x.Failure
	}
	return nil
}

type TxnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// succeeded is set to true if the compare evaluated to true or false otherwise.
	Succeeded bool `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	// responses is a list of responses corresponding to the results from applying
	// success if succeeded is true or failure if succeeded is false.
	Responses []*ResponseOp `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *TxnResponse) Reset() {
	*x = TxnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnResponse) ProtoMessage() {}

func (x *TxnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnResponse.ProtoReflect.Descriptor instead.
func (*TxnResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *TxnResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TxnResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *TxnResponse) GetResponses() []*ResponseOp {
	if x != nil {
		return x.Responses
	}
	return nil
}

// CompactionRequest compacts the key-value store up to a given revision. All superseded keys
// with a revision less than the compaction revision will be removed.
type CompactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision is the key-value store revision for the compaction operation.
	Revision int64 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// physical is set so the RPC will wait until the compaction is physically
	// applied to the local database such that compacted entries are totally
	// removed from the backend database.
	Physical bool `protobuf:"varint,2,opt,name=physical,proto3" json:"physical,omitempty"`
}

func (x *CompactionRequest) Reset() {
	*x = CompactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionRequest) ProtoMessage() {}

func (x *CompactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionRequest.ProtoReflect.Descriptor instead.
func (*CompactionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *CompactionRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *CompactionRequest) GetPhysical() bool {
	if x != nil {
		return x.Physical
	}
	return false
}

type CompactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *CompactionResponse) Reset() {
	*x = CompactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionResponse) ProtoMessage() {}

func (x *CompactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionResponse.ProtoReflect.Descriptor instead.
func (*CompactionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *CompactionResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type HashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HashRequest) Reset() {
	*x = HashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashRequest) ProtoMessage() {}

func (x *HashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashRequest.ProtoReflect.Descriptor instead.
func (*HashRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{14}
}

type HashKVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision is the key-value store revision for the hash operation.
	Revision int64 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *HashKVRequest) Reset() {
	*x = HashKVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashKVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashKVRequest) ProtoMessage() {}

func (x *HashKVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashKVRequest.ProtoReflect.Descriptor instead.
func (*HashKVRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *HashKVRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type HashKVResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// hash is the hash value computed from the responding member's MVCC keys up to a given revision.
	Hash uint32 `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// compact_revision is the compacted revision of key-value store when hash begins.
	CompactRevision int64 `protobuf:"varint,3,opt,name=compact_revision,json=compactRevision,proto3" json:"compact_revision,omitempty"`
}

func (x *HashKVResponse) Reset() {
	*x = HashKVResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashKVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashKVResponse) ProtoMessage() {}

func (x *HashKVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashKVResponse.ProtoReflect.Descriptor instead.
func (*HashKVResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *HashKVResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HashKVResponse) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *HashKVResponse) GetCompactRevision() int64 {
	if x != nil {
		return x.CompactRevision
	}
	return 0
}

type HashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// hash is the hash value computed from the responding member's KV's backend.
	Hash uint32 `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *HashResponse) Reset() {
	*x = HashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashResponse) ProtoMessage() {}

func (x *HashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashResponse.ProtoReflect.Descriptor instead.
func (*HashResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *HashResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HashResponse) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{18}
}

type SnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header has the current key-value store information. The first header in the snapshot
	// stream indicates the point in time of the snapshot.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// remaining_bytes is the number of blob bytes to be sent after this message
	RemainingBytes uint64 `protobuf:"varint,2,opt,name=remaining_bytes,json=remainingBytes,proto3" json:"remaining_bytes,omitempty"`
	// blob contains the next chunk of the snapshot in the snapshot stream.
	Blob []byte `protobuf:"bytes,3,opt,name=blob,proto3" json:"blob,omitempty"`
	// local version of Keyed DB server that created the snapshot.
	// In cluster with binaries with different version, each cluster can return different result.
	// Informs which Keyed DB server version should be used when restoring the snapshot.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *SnapshotResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SnapshotResponse) GetRemainingBytes() uint64 {
	if x != nil {
		return x.RemainingBytes
	}
	return 0
}

func (x *SnapshotResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *SnapshotResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type WatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request_union is a request to either create a new watcher or cancel an existing watcher.
	//
	// Types that are assignable to RequestUnion:
	//	*WatchRequest_CreateRequest
	//	*WatchRequest_CancelRequest
	//	*WatchRequest_ProgressRequest
	RequestUnion isWatchRequest_RequestUnion `protobuf_oneof:"request_union"`
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{20}
}

func (m *WatchRequest) GetRequestUnion() isWatchRequest_RequestUnion {
	if m != nil {
		return m.RequestUnion
	}
	return nil
}

func (x *WatchRequest) GetCreateRequest() *WatchCreateRequest {
	if x, ok := x.GetRequestUnion().(*WatchRequest_CreateRequest); ok {
		return x.CreateRequest
	}
	return nil
}

func (x *WatchRequest) GetCancelRequest() *WatchCancelRequest {
	if x, ok := x.GetRequestUnion().(*WatchRequest_CancelRequest); ok {
		return x.CancelRequest
	}
	return nil
}

func (x *WatchRequest) GetProgressRequest() *WatchProgressRequest {
	if x, ok := x.GetRequestUnion().(*WatchRequest_ProgressRequest); ok {
		return x.ProgressRequest
	}
	return nil
}

type isWatchRequest_RequestUnion interface {
	isWatchRequest_RequestUnion()
}

type WatchRequest_CreateRequest struct {
	CreateRequest *WatchCreateRequest `protobuf:"bytes,1,opt,name=create_request,json=createRequest,proto3,oneof"`
}

type WatchRequest_CancelRequest struct {
	CancelRequest *WatchCancelRequest `protobuf:"bytes,2,opt,name=cancel_request,json=cancelRequest,proto3,oneof"`
}

type WatchRequest_ProgressRequest struct {
	ProgressRequest *WatchProgressRequest `protobuf:"bytes,3,opt,name=progress_request,json=progressRequest,proto3,oneof"`
}

func (*WatchRequest_CreateRequest) isWatchRequest_RequestUnion() {}

func (*WatchRequest_CancelRequest) isWatchRequest_RequestUnion() {}

func (*WatchRequest_ProgressRequest) isWatchRequest_RequestUnion() {}

type WatchCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the key to register for watching.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// range_end is the end of the range [key, range_end) to watch. If range_end is not given,
	// only the key argument is watched. If range_end is equal to '\0', all keys greater than
	// or equal to the key argument are watched.
	// If the range_end is one bit larger than the given key,
	// then all keys with the prefix (the given key) will be watched.
	RangeEnd []byte `protobuf:"bytes,2,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	// start_revision is an optional revision to watch from (inclusive). No start_revision is "now".
	StartRevision int64 `protobuf:"varint,3,opt,name=start_revision,json=startRevision,proto3" json:"start_revision,omitempty"`
	// progress_notify is set so that the keyed server will periodically send a WatchResponse with
	// no events to the new watcher if there are no recent events. It is useful when clients
	// wish to recover a disconnected watcher starting from a recent known revision.
	// The keyed server may decide how often it will send notifications based on current load.
	ProgressNotify bool `protobuf:"varint,4,opt,name=progress_notify,json=progressNotify,proto3" json:"progress_notify,omitempty"`
	// filters filter the events at server side before it sends back to the watcher.
	Filters []WatchCreateRequest_FilterType `protobuf:"varint,5,rep,packed,name=filters,proto3,enum=v1.keyed.WatchCreateRequest_FilterType" json:"filters,omitempty"`
	// If prev_kv is set, created watcher gets the previous KV before the event happens.
	// If the previous KV is already compacted, nothing will be returned.
	PrevKv bool `protobuf:"varint,6,opt,name=prev_kv,json=prevKv,proto3" json:"prev_kv,omitempty"`
	// If watch_id is provided and non-zero, it will be assigned to this watcher.
	// Since creating a watcher in keyed is not a synchronous operation,
	// this can be used ensure that ordering is correct when creating multiple
	// watchers on the same stream. Creating a watcher with an ID already in
	// use on the stream will cause an error to be returned.
	WatchId int64 `protobuf:"varint,7,opt,name=watch_id,json=watchId,proto3" json:"watch_id,omitempty"`
	// fragment enables splitting large revisions into multiple watch responses.
	Fragment bool `protobuf:"varint,8,opt,name=fragment,proto3" json:"fragment,omitempty"`
}

func (x *WatchCreateRequest) Reset() {
	*x = WatchCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCreateRequest) ProtoMessage() {}

func (x *WatchCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCreateRequest.ProtoReflect.Descriptor instead.
func (*WatchCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *WatchCreateRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WatchCreateRequest) GetRangeEnd() []byte {
	if x != nil {
		return x.RangeEnd
	}
	return nil
}

func (x *WatchCreateRequest) GetStartRevision() int64 {
	if x != nil {
		return x.StartRevision
	}
	return 0
}

func (x *WatchCreateRequest) GetProgressNotify() bool {
	if x != nil {
		return x.ProgressNotify
	}
	return false
}

func (x *WatchCreateRequest) GetFilters() []WatchCreateRequest_FilterType {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *WatchCreateRequest) GetPrevKv() bool {
	if x != nil {
		return x.PrevKv
	}
	return false
}

func (x *WatchCreateRequest) GetWatchId() int64 {
	if x != nil {
		return x.WatchId
	}
	return 0
}

func (x *WatchCreateRequest) GetFragment() bool {
	if x != nil {
		return x.Fragment
	}
	return false
}

type WatchCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// watch_id is the watcher id to cancel so that no more events are transmitted.
	WatchId int64 `protobuf:"varint,1,opt,name=watch_id,json=watchId,proto3" json:"watch_id,omitempty"`
}

func (x *WatchCancelRequest) Reset() {
	*x = WatchCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCancelRequest) ProtoMessage() {}

func (x *WatchCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCancelRequest.ProtoReflect.Descriptor instead.
func (*WatchCancelRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *WatchCancelRequest) GetWatchId() int64 {
	if x != nil {
		return x.WatchId
	}
	return 0
}

// Requests the a watch stream progress status be sent in the watch response stream as soon as
// possible.
type WatchProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchProgressRequest) Reset() {
	*x = WatchProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchProgressRequest) ProtoMessage() {}

func (x *WatchProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchProgressRequest.ProtoReflect.Descriptor instead.
func (*WatchProgressRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{23}
}

type WatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// watch_id is the ID of the watcher that corresponds to the response.
	WatchId int64 `protobuf:"varint,2,opt,name=watch_id,json=watchId,proto3" json:"watch_id,omitempty"`
	// created is set to true if the response is for a create watch request.
	// The client should record the watch_id and expect to receive events for
	// the created watcher from the same stream.
	// All events sent to the created watcher will attach with the same watch_id.
	Created bool `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	// canceled is set to true if the response is for a cancel watch request.
	// No further events will be sent to the canceled watcher.
	Canceled bool `protobuf:"varint,4,opt,name=canceled,proto3" json:"canceled,omitempty"`
	// compact_revision is set to the minimum index if a watcher tries to watch
	// at a compacted index.
	//
	// This happens when creating a watcher at a compacted revision or the watcher cannot
	// catch up with the progress of the key-value store.
	//
	// The client should treat the watcher as canceled and should not try to create any
	// watcher with the same start_revision again.
	CompactRevision int64 `protobuf:"varint,5,opt,name=compact_revision,json=compactRevision,proto3" json:"compact_revision,omitempty"`
	// cancel_reason indicates the reason for canceling the watcher.
	CancelReason string `protobuf:"bytes,6,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
	// framgment is true if large watch response was split over multiple responses.
	Fragment bool          `protobuf:"varint,7,opt,name=fragment,proto3" json:"fragment,omitempty"`
	Events   []*mvcc.Event `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *WatchResponse) Reset() {
	*x = WatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResponse) ProtoMessage() {}

func (x *WatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResponse.ProtoReflect.Descriptor instead.
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *WatchResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WatchResponse) GetWatchId() int64 {
	if x != nil {
		return x.WatchId
	}
	return 0
}

func (x *WatchResponse) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

func (x *WatchResponse) GetCanceled() bool {
	if x != nil {
		return x.Canceled
	}
	return false
}

func (x *WatchResponse) GetCompactRevision() int64 {
	if x != nil {
		return x.CompactRevision
	}
	return 0
}

func (x *WatchResponse) GetCancelReason() string {
	if x != nil {
		return x.CancelReason
	}
	return ""
}

func (x *WatchResponse) GetFragment() bool {
	if x != nil {
		return x.Fragment
	}
	return false
}

func (x *WatchResponse) GetEvents() []*mvcc.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type LeaseGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TTL is the advisory time-to-live in seconds. Expired lease will return -1.
	TTL int64 `protobuf:"varint,1,opt,name=TTL,proto3" json:"TTL,omitempty"`
	// ID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID.
	ID int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *LeaseGrantRequest) Reset() {
	*x = LeaseGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseGrantRequest) ProtoMessage() {}

func (x *LeaseGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseGrantRequest.ProtoReflect.Descriptor instead.
func (*LeaseGrantRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *LeaseGrantRequest) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *LeaseGrantRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type LeaseGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// ID is the lease ID for the granted lease.
	ID int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// TTL is the server chosen lease time-to-live in seconds.
	TTL   int64  `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *LeaseGrantResponse) Reset() {
	*x = LeaseGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseGrantResponse) ProtoMessage() {}

func (x *LeaseGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseGrantResponse.ProtoReflect.Descriptor instead.
func (*LeaseGrantResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *LeaseGrantResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaseGrantResponse) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LeaseGrantResponse) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *LeaseGrantResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type LeaseRevokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted.
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *LeaseRevokeRequest) Reset() {
	*x = LeaseRevokeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseRevokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseRevokeRequest) ProtoMessage() {}

func (x *LeaseRevokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseRevokeRequest.ProtoReflect.Descriptor instead.
func (*LeaseRevokeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *LeaseRevokeRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type LeaseRevokeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *LeaseRevokeResponse) Reset() {
	*x = LeaseRevokeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseRevokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseRevokeResponse) ProtoMessage() {}

func (x *LeaseRevokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseRevokeResponse.ProtoReflect.Descriptor instead.
func (*LeaseRevokeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *LeaseRevokeResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type LeaseCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the lease ID to checkpoint.
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Remaining_TTL is the remaining time until expiry of the lease.
	Remaining_TTL int64 `protobuf:"varint,2,opt,name=remaining_TTL,json=remainingTTL,proto3" json:"remaining_TTL,omitempty"`
}

func (x *LeaseCheckpoint) Reset() {
	*x = LeaseCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseCheckpoint) ProtoMessage() {}

func (x *LeaseCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseCheckpoint.ProtoReflect.Descriptor instead.
func (*LeaseCheckpoint) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *LeaseCheckpoint) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LeaseCheckpoint) GetRemaining_TTL() int64 {
	if x != nil {
		return x.Remaining_TTL
	}
	return 0
}

type LeaseCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoints []*LeaseCheckpoint `protobuf:"bytes,1,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
}

func (x *LeaseCheckpointRequest) Reset() {
	*x = LeaseCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseCheckpointRequest) ProtoMessage() {}

func (x *LeaseCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseCheckpointRequest.ProtoReflect.Descriptor instead.
func (*LeaseCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *LeaseCheckpointRequest) GetCheckpoints() []*LeaseCheckpoint {
	if x != nil {
		return x.Checkpoints
	}
	return nil
}

type LeaseCheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *LeaseCheckpointResponse) Reset() {
	*x = LeaseCheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseCheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseCheckpointResponse) ProtoMessage() {}

func (x *LeaseCheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseCheckpointResponse.ProtoReflect.Descriptor instead.
func (*LeaseCheckpointResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{31}
}

func (x *LeaseCheckpointResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type LeaseKeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the lease ID for the lease to keep alive.
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *LeaseKeepAliveRequest) Reset() {
	*x = LeaseKeepAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseKeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseKeepAliveRequest) ProtoMessage() {}

func (x *LeaseKeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseKeepAliveRequest.ProtoReflect.Descriptor instead.
func (*LeaseKeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *LeaseKeepAliveRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type LeaseKeepAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// ID is the lease ID from the keep alive request.
	ID int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// TTL is the new time-to-live for the lease.
	TTL int64 `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
}

func (x *LeaseKeepAliveResponse) Reset() {
	*x = LeaseKeepAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseKeepAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseKeepAliveResponse) ProtoMessage() {}

func (x *LeaseKeepAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseKeepAliveResponse.ProtoReflect.Descriptor instead.
func (*LeaseKeepAliveResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *LeaseKeepAliveResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaseKeepAliveResponse) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LeaseKeepAliveResponse) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

type LeaseTimeToLiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the lease ID for the lease.
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// keys is true to query all the keys attached to this lease.
	Keys bool `protobuf:"varint,2,opt,name=keys,proto3" json:"keys,omitempty"`
}

func (x *LeaseTimeToLiveRequest) Reset() {
	*x = LeaseTimeToLiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseTimeToLiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseTimeToLiveRequest) ProtoMessage() {}

func (x *LeaseTimeToLiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseTimeToLiveRequest.ProtoReflect.Descriptor instead.
func (*LeaseTimeToLiveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *LeaseTimeToLiveRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LeaseTimeToLiveRequest) GetKeys() bool {
	if x != nil {
		return x.Keys
	}
	return false
}

type LeaseTimeToLiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// ID is the lease ID from the keep alive request.
	ID int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.
	TTL int64 `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
	// GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
	GrantedTTL int64 `protobuf:"varint,4,opt,name=grantedTTL,proto3" json:"grantedTTL,omitempty"`
	// Keys is the list of keys attached to this lease.
	Keys [][]byte `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *LeaseTimeToLiveResponse) Reset() {
	*x = LeaseTimeToLiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseTimeToLiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseTimeToLiveResponse) ProtoMessage() {}

func (x *LeaseTimeToLiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseTimeToLiveResponse.ProtoReflect.Descriptor instead.
func (*LeaseTimeToLiveResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *LeaseTimeToLiveResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaseTimeToLiveResponse) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *LeaseTimeToLiveResponse) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *LeaseTimeToLiveResponse) GetGrantedTTL() int64 {
	if x != nil {
		return x.GrantedTTL
	}
	return 0
}

func (x *LeaseTimeToLiveResponse) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type LeaseLeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaseLeasesRequest) Reset() {
	*x = LeaseLeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseLeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseLeasesRequest) ProtoMessage() {}

func (x *LeaseLeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseLeasesRequest.ProtoReflect.Descriptor instead.
func (*LeaseLeasesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{36}
}

type LeaseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"` // TODO: int64 TTL = 2;
}

func (x *LeaseStatus) Reset() {
	*x = LeaseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseStatus) ProtoMessage() {}

func (x *LeaseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseStatus.ProtoReflect.Descriptor instead.
func (*LeaseStatus) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *LeaseStatus) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type LeaseLeasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Leases []*LeaseStatus  `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
}

func (x *LeaseLeasesResponse) Reset() {
	*x = LeaseLeasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseLeasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseLeasesResponse) ProtoMessage() {}

func (x *LeaseLeasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseLeasesResponse.ProtoReflect.Descriptor instead.
func (*LeaseLeasesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *LeaseLeasesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaseLeasesResponse) GetLeases() []*LeaseStatus {
	if x != nil {
		return x.Leases
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the member ID for this member.
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// name is the human-readable name of the member. If the member is not started, the name will be an empty string.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// peerURLs is the list of URLs the member exposes to the cluster for communication.
	PeerURLs []string `protobuf:"bytes,3,rep,name=peerURLs,proto3" json:"peerURLs,omitempty"`
	// clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.
	ClientURLs []string `protobuf:"bytes,4,rep,name=clientURLs,proto3" json:"clientURLs,omitempty"`
	// isLearner indicates if the member is raft learner.
	IsLearner bool `protobuf:"varint,5,opt,name=isLearner,proto3" json:"isLearner,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{39}
}

func (x *Member) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetPeerURLs() []string {
	if x != nil {
		return x.PeerURLs
	}
	return nil
}

func (x *Member) GetClientURLs() []string {
	if x != nil {
		return x.ClientURLs
	}
	return nil
}

func (x *Member) GetIsLearner() bool {
	if x != nil {
		return x.IsLearner
	}
	return false
}

type MemberAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// peerURLs is the list of URLs the added member will use to communicate with the cluster.
	PeerURLs []string `protobuf:"bytes,1,rep,name=peerURLs,proto3" json:"peerURLs,omitempty"`
	// isLearner indicates if the added member is raft learner.
	IsLearner bool `protobuf:"varint,2,opt,name=isLearner,proto3" json:"isLearner,omitempty"`
}

func (x *MemberAddRequest) Reset() {
	*x = MemberAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAddRequest) ProtoMessage() {}

func (x *MemberAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAddRequest.ProtoReflect.Descriptor instead.
func (*MemberAddRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *MemberAddRequest) GetPeerURLs() []string {
	if x != nil {
		return x.PeerURLs
	}
	return nil
}

func (x *MemberAddRequest) GetIsLearner() bool {
	if x != nil {
		return x.IsLearner
	}
	return false
}

type MemberAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// member is the member information for the added member.
	Member *Member `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	// members is a list of all members after adding the new member.
	Members []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *MemberAddResponse) Reset() {
	*x = MemberAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAddResponse) ProtoMessage() {}

func (x *MemberAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAddResponse.ProtoReflect.Descriptor instead.
func (*MemberAddResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{41}
}

func (x *MemberAddResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MemberAddResponse) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberAddResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type MemberRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the member ID of the member to remove.
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *MemberRemoveRequest) Reset() {
	*x = MemberRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRemoveRequest) ProtoMessage() {}

func (x *MemberRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRemoveRequest.ProtoReflect.Descriptor instead.
func (*MemberRemoveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *MemberRemoveRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type MemberRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// members is a list of all members after removing the member.
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *MemberRemoveResponse) Reset() {
	*x = MemberRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRemoveResponse) ProtoMessage() {}

func (x *MemberRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRemoveResponse.ProtoReflect.Descriptor instead.
func (*MemberRemoveResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *MemberRemoveResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MemberRemoveResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type MemberUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the member ID of the member to update.
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// peerURLs is the new list of URLs the member will use to communicate with the cluster.
	PeerURLs []string `protobuf:"bytes,2,rep,name=peerURLs,proto3" json:"peerURLs,omitempty"`
}

func (x *MemberUpdateRequest) Reset() {
	*x = MemberUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdateRequest) ProtoMessage() {}

func (x *MemberUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdateRequest.ProtoReflect.Descriptor instead.
func (*MemberUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *MemberUpdateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MemberUpdateRequest) GetPeerURLs() []string {
	if x != nil {
		return x.PeerURLs
	}
	return nil
}

type MemberUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// members is a list of all members after updating the member.
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *MemberUpdateResponse) Reset() {
	*x = MemberUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdateResponse) ProtoMessage() {}

func (x *MemberUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdateResponse.ProtoReflect.Descriptor instead.
func (*MemberUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *MemberUpdateResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MemberUpdateResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type MemberListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Linearizable bool `protobuf:"varint,1,opt,name=linearizable,proto3" json:"linearizable,omitempty"`
}

func (x *MemberListRequest) Reset() {
	*x = MemberListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberListRequest) ProtoMessage() {}

func (x *MemberListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberListRequest.ProtoReflect.Descriptor instead.
func (*MemberListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *MemberListRequest) GetLinearizable() bool {
	if x != nil {
		return x.Linearizable
	}
	return false
}

type MemberListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// members is a list of all members associated with the cluster.
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *MemberListResponse) Reset() {
	*x = MemberListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberListResponse) ProtoMessage() {}

func (x *MemberListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberListResponse.ProtoReflect.Descriptor instead.
func (*MemberListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{47}
}

func (x *MemberListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MemberListResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type MemberPromoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the member ID of the member to promote.
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *MemberPromoteRequest) Reset() {
	*x = MemberPromoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberPromoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPromoteRequest) ProtoMessage() {}

func (x *MemberPromoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPromoteRequest.ProtoReflect.Descriptor instead.
func (*MemberPromoteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{48}
}

func (x *MemberPromoteRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type MemberPromoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// members is a list of all members after promoting the member.
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *MemberPromoteResponse) Reset() {
	*x = MemberPromoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberPromoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPromoteResponse) ProtoMessage() {}

func (x *MemberPromoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPromoteResponse.ProtoReflect.Descriptor instead.
func (*MemberPromoteResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{49}
}

func (x *MemberPromoteResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MemberPromoteResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type DefragmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DefragmentRequest) Reset() {
	*x = DefragmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefragmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefragmentRequest) ProtoMessage() {}

func (x *DefragmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefragmentRequest.ProtoReflect.Descriptor instead.
func (*DefragmentRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{50}
}

type DefragmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *DefragmentResponse) Reset() {
	*x = DefragmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefragmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefragmentResponse) ProtoMessage() {}

func (x *DefragmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefragmentResponse.ProtoReflect.Descriptor instead.
func (*DefragmentResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{51}
}

func (x *DefragmentResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type MoveLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// targetID is the node ID for the new leader.
	TargetID uint64 `protobuf:"varint,1,opt,name=targetID,proto3" json:"targetID,omitempty"`
}

func (x *MoveLeaderRequest) Reset() {
	*x = MoveLeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveLeaderRequest) ProtoMessage() {}

func (x *MoveLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveLeaderRequest.ProtoReflect.Descriptor instead.
func (*MoveLeaderRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{52}
}

func (x *MoveLeaderRequest) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

type MoveLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *MoveLeaderResponse) Reset() {
	*x = MoveLeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveLeaderResponse) ProtoMessage() {}

func (x *MoveLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveLeaderResponse.ProtoReflect.Descriptor instead.
func (*MoveLeaderResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{53}
}

func (x *MoveLeaderResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AlarmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action is the kind of alarm request to issue. The action
	// may GET alarm statuses, ACTIVATE an alarm, or DEACTIVATE a
	// raised alarm.
	Action AlarmRequest_AlarmAction `protobuf:"varint,1,opt,name=action,proto3,enum=v1.keyed.AlarmRequest_AlarmAction" json:"action,omitempty"`
	// memberID is the ID of the member associated with the alarm. If memberID is 0, the
	// alarm request covers all members.
	MemberID uint64 `protobuf:"varint,2,opt,name=memberID,proto3" json:"memberID,omitempty"`
	// alarm is the type of alarm to consider for this request.
	Alarm AlarmType `protobuf:"varint,3,opt,name=alarm,proto3,enum=v1.keyed.AlarmType" json:"alarm,omitempty"`
}

func (x *AlarmRequest) Reset() {
	*x = AlarmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmRequest) ProtoMessage() {}

func (x *AlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmRequest.ProtoReflect.Descriptor instead.
func (*AlarmRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{54}
}

func (x *AlarmRequest) GetAction() AlarmRequest_AlarmAction {
	if x != nil {
		return x.Action
	}
	return AlarmRequest_GET
}

func (x *AlarmRequest) GetMemberID() uint64 {
	if x != nil {
		return x.MemberID
	}
	return 0
}

func (x *AlarmRequest) GetAlarm() AlarmType {
	if x != nil {
		return x.Alarm
	}
	return AlarmType_NONE
}

type AlarmMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// memberID is the ID of the member associated with the raised alarm.
	MemberID uint64 `protobuf:"varint,1,opt,name=memberID,proto3" json:"memberID,omitempty"`
	// alarm is the type of alarm which has been raised.
	Alarm AlarmType `protobuf:"varint,2,opt,name=alarm,proto3,enum=v1.keyed.AlarmType" json:"alarm,omitempty"`
}

func (x *AlarmMember) Reset() {
	*x = AlarmMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmMember) ProtoMessage() {}

func (x *AlarmMember) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmMember.ProtoReflect.Descriptor instead.
func (*AlarmMember) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{55}
}

func (x *AlarmMember) GetMemberID() uint64 {
	if x != nil {
		return x.MemberID
	}
	return 0
}

func (x *AlarmMember) GetAlarm() AlarmType {
	if x != nil {
		return x.Alarm
	}
	return AlarmType_NONE
}

type AlarmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// alarms is a list of alarms associated with the alarm request.
	Alarms []*AlarmMember `protobuf:"bytes,2,rep,name=alarms,proto3" json:"alarms,omitempty"`
}

func (x *AlarmResponse) Reset() {
	*x = AlarmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmResponse) ProtoMessage() {}

func (x *AlarmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmResponse.ProtoReflect.Descriptor instead.
func (*AlarmResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{56}
}

func (x *AlarmResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AlarmResponse) GetAlarms() []*AlarmMember {
	if x != nil {
		return x.Alarms
	}
	return nil
}

type DowngradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action is the kind of downgrade request to issue. The action may
	// VALIDATE the target version, DOWNGRADE the cluster version,
	// or CANCEL the current downgrading job.
	Action DowngradeRequest_DowngradeAction `protobuf:"varint,1,opt,name=action,proto3,enum=v1.keyed.DowngradeRequest_DowngradeAction" json:"action,omitempty"`
	// version is the target version to downgrade.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DowngradeRequest) Reset() {
	*x = DowngradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DowngradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DowngradeRequest) ProtoMessage() {}

func (x *DowngradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DowngradeRequest.ProtoReflect.Descriptor instead.
func (*DowngradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{57}
}

func (x *DowngradeRequest) GetAction() DowngradeRequest_DowngradeAction {
	if x != nil {
		return x.Action
	}
	return DowngradeRequest_VALIDATE
}

func (x *DowngradeRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DowngradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// version is the current cluster version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DowngradeResponse) Reset() {
	*x = DowngradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DowngradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DowngradeResponse) ProtoMessage() {}

func (x *DowngradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DowngradeResponse.ProtoReflect.Descriptor instead.
func (*DowngradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{58}
}

func (x *DowngradeResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DowngradeResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{59}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// version is the cluster protocol version used by the responding member.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// dbSize is the size of the backend database physically allocated, in bytes, of the responding member.
	DbSize int64 `protobuf:"varint,3,opt,name=dbSize,proto3" json:"dbSize,omitempty"`
	// leader is the member ID which the responding member believes is the current leader.
	Leader uint64 `protobuf:"varint,4,opt,name=leader,proto3" json:"leader,omitempty"`
	// raftIndex is the current raft committed index of the responding member.
	RaftIndex uint64 `protobuf:"varint,5,opt,name=raftIndex,proto3" json:"raftIndex,omitempty"`
	// raftTerm is the current raft term of the responding member.
	RaftTerm uint64 `protobuf:"varint,6,opt,name=raftTerm,proto3" json:"raftTerm,omitempty"`
	// raftAppliedIndex is the current raft applied index of the responding member.
	RaftAppliedIndex uint64 `protobuf:"varint,7,opt,name=raftAppliedIndex,proto3" json:"raftAppliedIndex,omitempty"`
	// errors contains alarm/health information and status.
	Errors []string `protobuf:"bytes,8,rep,name=errors,proto3" json:"errors,omitempty"`
	// dbSizeInUse is the size of the backend database logically in use, in bytes, of the responding member.
	DbSizeInUse int64 `protobuf:"varint,9,opt,name=dbSizeInUse,proto3" json:"dbSizeInUse,omitempty"`
	// isLearner indicates if the member is raft learner.
	IsLearner bool `protobuf:"varint,10,opt,name=isLearner,proto3" json:"isLearner,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{60}
}

func (x *StatusResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StatusResponse) GetDbSize() int64 {
	if x != nil {
		return x.DbSize
	}
	return 0
}

func (x *StatusResponse) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *StatusResponse) GetRaftIndex() uint64 {
	if x != nil {
		return x.RaftIndex
	}
	return 0
}

func (x *StatusResponse) GetRaftTerm() uint64 {
	if x != nil {
		return x.RaftTerm
	}
	return 0
}

func (x *StatusResponse) GetRaftAppliedIndex() uint64 {
	if x != nil {
		return x.RaftAppliedIndex
	}
	return 0
}

func (x *StatusResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *StatusResponse) GetDbSizeInUse() int64 {
	if x != nil {
		return x.DbSizeInUse
	}
	return 0
}

func (x *StatusResponse) GetIsLearner() bool {
	if x != nil {
		return x.IsLearner
	}
	return false
}

type AuthEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthEnableRequest) Reset() {
	*x = AuthEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthEnableRequest) ProtoMessage() {}

func (x *AuthEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthEnableRequest.ProtoReflect.Descriptor instead.
func (*AuthEnableRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{61}
}

type AuthDisableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthDisableRequest) Reset() {
	*x = AuthDisableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthDisableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthDisableRequest) ProtoMessage() {}

func (x *AuthDisableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthDisableRequest.ProtoReflect.Descriptor instead.
func (*AuthDisableRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{62}
}

type AuthStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthStatusRequest) Reset() {
	*x = AuthStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthStatusRequest) ProtoMessage() {}

func (x *AuthStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthStatusRequest.ProtoReflect.Descriptor instead.
func (*AuthStatusRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{63}
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{64}
}

func (x *AuthenticateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthenticateRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthUserAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password       string               `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Options        *auth.UserAddOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	HashedPassword string               `protobuf:"bytes,4,opt,name=hashedPassword,proto3" json:"hashedPassword,omitempty"`
}

func (x *AuthUserAddRequest) Reset() {
	*x = AuthUserAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserAddRequest) ProtoMessage() {}

func (x *AuthUserAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserAddRequest.ProtoReflect.Descriptor instead.
func (*AuthUserAddRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{65}
}

func (x *AuthUserAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthUserAddRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthUserAddRequest) GetOptions() *auth.UserAddOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AuthUserAddRequest) GetHashedPassword() string {
	if x != nil {
		return x.HashedPassword
	}
	return ""
}

type AuthUserGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AuthUserGetRequest) Reset() {
	*x = AuthUserGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserGetRequest) ProtoMessage() {}

func (x *AuthUserGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserGetRequest.ProtoReflect.Descriptor instead.
func (*AuthUserGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{66}
}

func (x *AuthUserGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AuthUserDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the user to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AuthUserDeleteRequest) Reset() {
	*x = AuthUserDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserDeleteRequest) ProtoMessage() {}

func (x *AuthUserDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserDeleteRequest.ProtoReflect.Descriptor instead.
func (*AuthUserDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{67}
}

func (x *AuthUserDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AuthUserChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the user whose password is being changed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// password is the new password for the user. Note that this field will be removed in the API layer.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// hashedPassword is the new password for the user. Note that this field will be initialized in the API layer.
	HashedPassword string `protobuf:"bytes,3,opt,name=hashedPassword,proto3" json:"hashedPassword,omitempty"`
}

func (x *AuthUserChangePasswordRequest) Reset() {
	*x = AuthUserChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserChangePasswordRequest) ProtoMessage() {}

func (x *AuthUserChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*AuthUserChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{68}
}

func (x *AuthUserChangePasswordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthUserChangePasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthUserChangePasswordRequest) GetHashedPassword() string {
	if x != nil {
		return x.HashedPassword
	}
	return ""
}

type AuthUserGrantRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the name of the user which should be granted a given role.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// role is the name of the role to grant to the user.
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AuthUserGrantRoleRequest) Reset() {
	*x = AuthUserGrantRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserGrantRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserGrantRoleRequest) ProtoMessage() {}

func (x *AuthUserGrantRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserGrantRoleRequest.ProtoReflect.Descriptor instead.
func (*AuthUserGrantRoleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{69}
}

func (x *AuthUserGrantRoleRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AuthUserGrantRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AuthUserRevokeRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AuthUserRevokeRoleRequest) Reset() {
	*x = AuthUserRevokeRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserRevokeRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserRevokeRoleRequest) ProtoMessage() {}

func (x *AuthUserRevokeRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserRevokeRoleRequest.ProtoReflect.Descriptor instead.
func (*AuthUserRevokeRoleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{70}
}

func (x *AuthUserRevokeRoleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthUserRevokeRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AuthRoleAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the role to add to the authentication system.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AuthRoleAddRequest) Reset() {
	*x = AuthRoleAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleAddRequest) ProtoMessage() {}

func (x *AuthRoleAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleAddRequest.ProtoReflect.Descriptor instead.
func (*AuthRoleAddRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{71}
}

func (x *AuthRoleAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AuthRoleGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AuthRoleGetRequest) Reset() {
	*x = AuthRoleGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleGetRequest) ProtoMessage() {}

func (x *AuthRoleGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleGetRequest.ProtoReflect.Descriptor instead.
func (*AuthRoleGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{72}
}

func (x *AuthRoleGetRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AuthUserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthUserListRequest) Reset() {
	*x = AuthUserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserListRequest) ProtoMessage() {}

func (x *AuthUserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserListRequest.ProtoReflect.Descriptor instead.
func (*AuthUserListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{73}
}

type AuthRoleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthRoleListRequest) Reset() {
	*x = AuthRoleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleListRequest) ProtoMessage() {}

func (x *AuthRoleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleListRequest.ProtoReflect.Descriptor instead.
func (*AuthRoleListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{74}
}

type AuthRoleDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AuthRoleDeleteRequest) Reset() {
	*x = AuthRoleDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleDeleteRequest) ProtoMessage() {}

func (x *AuthRoleDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleDeleteRequest.ProtoReflect.Descriptor instead.
func (*AuthRoleDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{75}
}

func (x *AuthRoleDeleteRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type AuthRoleGrantPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the role which will be granted the permission.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// perm is the permission to grant to the role.
	Perm *auth.Permission `protobuf:"bytes,2,opt,name=perm,proto3" json:"perm,omitempty"`
}

func (x *AuthRoleGrantPermissionRequest) Reset() {
	*x = AuthRoleGrantPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleGrantPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleGrantPermissionRequest) ProtoMessage() {}

func (x *AuthRoleGrantPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleGrantPermissionRequest.ProtoReflect.Descriptor instead.
func (*AuthRoleGrantPermissionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{76}
}

func (x *AuthRoleGrantPermissionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthRoleGrantPermissionRequest) GetPerm() *auth.Permission {
	if x != nil {
		return x.Perm
	}
	return nil
}

type AuthRoleRevokePermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role     string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Key      []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	RangeEnd []byte `protobuf:"bytes,3,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
}

func (x *AuthRoleRevokePermissionRequest) Reset() {
	*x = AuthRoleRevokePermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleRevokePermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleRevokePermissionRequest) ProtoMessage() {}

func (x *AuthRoleRevokePermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleRevokePermissionRequest.ProtoReflect.Descriptor instead.
func (*AuthRoleRevokePermissionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{77}
}

func (x *AuthRoleRevokePermissionRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AuthRoleRevokePermissionRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AuthRoleRevokePermissionRequest) GetRangeEnd() []byte {
	if x != nil {
		return x.RangeEnd
	}
	return nil
}

type AuthEnableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthEnableResponse) Reset() {
	*x = AuthEnableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthEnableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthEnableResponse) ProtoMessage() {}

func (x *AuthEnableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthEnableResponse.ProtoReflect.Descriptor instead.
func (*AuthEnableResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{78}
}

func (x *AuthEnableResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthDisableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthDisableResponse) Reset() {
	*x = AuthDisableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthDisableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthDisableResponse) ProtoMessage() {}

func (x *AuthDisableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthDisableResponse.ProtoReflect.Descriptor instead.
func (*AuthDisableResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{79}
}

func (x *AuthDisableResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Enabled bool            `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// authRevision is the current revision of Auth store
	AuthRevision uint64 `protobuf:"varint,3,opt,name=authRevision,proto3" json:"authRevision,omitempty"`
}

func (x *AuthStatusResponse) Reset() {
	*x = AuthStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthStatusResponse) ProtoMessage() {}

func (x *AuthStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthStatusResponse.ProtoReflect.Descriptor instead.
func (*AuthStatusResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{80}
}

func (x *AuthStatusResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuthStatusResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AuthStatusResponse) GetAuthRevision() uint64 {
	if x != nil {
		return x.AuthRevision
	}
	return 0
}

type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// token is an authorized token that can be used in succeeding RPCs
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{81}
}

func (x *AuthenticateResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuthenticateResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AuthUserAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthUserAddResponse) Reset() {
	*x = AuthUserAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserAddResponse) ProtoMessage() {}

func (x *AuthUserAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserAddResponse.ProtoReflect.Descriptor instead.
func (*AuthUserAddResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{82}
}

func (x *AuthUserAddResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthUserGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Roles  []string        `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AuthUserGetResponse) Reset() {
	*x = AuthUserGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserGetResponse) ProtoMessage() {}

func (x *AuthUserGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserGetResponse.ProtoReflect.Descriptor instead.
func (*AuthUserGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{83}
}

func (x *AuthUserGetResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuthUserGetResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type AuthUserDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthUserDeleteResponse) Reset() {
	*x = AuthUserDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserDeleteResponse) ProtoMessage() {}

func (x *AuthUserDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserDeleteResponse.ProtoReflect.Descriptor instead.
func (*AuthUserDeleteResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{84}
}

func (x *AuthUserDeleteResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthUserChangePasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthUserChangePasswordResponse) Reset() {
	*x = AuthUserChangePasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserChangePasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserChangePasswordResponse) ProtoMessage() {}

func (x *AuthUserChangePasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserChangePasswordResponse.ProtoReflect.Descriptor instead.
func (*AuthUserChangePasswordResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{85}
}

func (x *AuthUserChangePasswordResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthUserGrantRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthUserGrantRoleResponse) Reset() {
	*x = AuthUserGrantRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserGrantRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserGrantRoleResponse) ProtoMessage() {}

func (x *AuthUserGrantRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserGrantRoleResponse.ProtoReflect.Descriptor instead.
func (*AuthUserGrantRoleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{86}
}

func (x *AuthUserGrantRoleResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthUserRevokeRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthUserRevokeRoleResponse) Reset() {
	*x = AuthUserRevokeRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserRevokeRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserRevokeRoleResponse) ProtoMessage() {}

func (x *AuthUserRevokeRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserRevokeRoleResponse.ProtoReflect.Descriptor instead.
func (*AuthUserRevokeRoleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{87}
}

func (x *AuthUserRevokeRoleResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthRoleAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthRoleAddResponse) Reset() {
	*x = AuthRoleAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleAddResponse) ProtoMessage() {}

func (x *AuthRoleAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleAddResponse.ProtoReflect.Descriptor instead.
func (*AuthRoleAddResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{88}
}

func (x *AuthRoleAddResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthRoleGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Perm   []*auth.Permission `protobuf:"bytes,2,rep,name=perm,proto3" json:"perm,omitempty"`
}

func (x *AuthRoleGetResponse) Reset() {
	*x = AuthRoleGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleGetResponse) ProtoMessage() {}

func (x *AuthRoleGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleGetResponse.ProtoReflect.Descriptor instead.
func (*AuthRoleGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{89}
}

func (x *AuthRoleGetResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuthRoleGetResponse) GetPerm() []*auth.Permission {
	if x != nil {
		return x.Perm
	}
	return nil
}

type AuthRoleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Roles  []string        `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AuthRoleListResponse) Reset() {
	*x = AuthRoleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleListResponse) ProtoMessage() {}

func (x *AuthRoleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleListResponse.ProtoReflect.Descriptor instead.
func (*AuthRoleListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{90}
}

func (x *AuthRoleListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuthRoleListResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type AuthUserListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Users  []string        `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *AuthUserListResponse) Reset() {
	*x = AuthUserListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthUserListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthUserListResponse) ProtoMessage() {}

func (x *AuthUserListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthUserListResponse.ProtoReflect.Descriptor instead.
func (*AuthUserListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{91}
}

func (x *AuthUserListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuthUserListResponse) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

type AuthRoleDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthRoleDeleteResponse) Reset() {
	*x = AuthRoleDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleDeleteResponse) ProtoMessage() {}

func (x *AuthRoleDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleDeleteResponse.ProtoReflect.Descriptor instead.
func (*AuthRoleDeleteResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{92}
}

func (x *AuthRoleDeleteResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthRoleGrantPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthRoleGrantPermissionResponse) Reset() {
	*x = AuthRoleGrantPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleGrantPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleGrantPermissionResponse) ProtoMessage() {}

func (x *AuthRoleGrantPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleGrantPermissionResponse.ProtoReflect.Descriptor instead.
func (*AuthRoleGrantPermissionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{93}
}

func (x *AuthRoleGrantPermissionResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AuthRoleRevokePermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AuthRoleRevokePermissionResponse) Reset() {
	*x = AuthRoleRevokePermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRoleRevokePermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRoleRevokePermissionResponse) ProtoMessage() {}

func (x *AuthRoleRevokePermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_core_v1_keyed_rpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRoleRevokePermissionResponse.ProtoReflect.Descriptor instead.
func (*AuthRoleRevokePermissionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP(), []int{94}
}

func (x *AuthRoleRevokePermissionResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

var File_pkg_core_v1_keyed_rpc_proto protoreflect.FileDescriptor

var file_pkg_core_v1_keyed_rpc_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x1a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x76, 0x63, 0x63, 0x2f, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8e, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72,
	0x61, 0x66, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30,
	0x22, 0xbb, 0x05, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x31, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x37, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x1a,
	0x07, 0x92, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x4b, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x1a, 0x07, 0x92, 0xb5,
	0x18, 0x03, 0x31, 0x2e, 0x30, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x99,
	0x01, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x76, 0x63, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6b, 0x76, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x6b, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x31, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x4b, 0x76, 0x12, 0x2a, 0x0a, 0x0c, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x32, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x8a, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x32, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x7d, 0x0a, 0x0b, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x6b, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x76, 0x63, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x4b, 0x76,
	0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x6e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6b, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x4b, 0x76,
	0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x76, 0x63, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x76, 0x4b, 0x76, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0xab, 0x02,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x3d, 0x0a, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x78, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x78, 0x6e, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x54,
	0x78, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x33, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x78, 0x6e, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x33, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x64, 0x22, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x10, 0x03, 0x1a, 0x07, 0x9a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x1a, 0x07, 0x92,
	0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x59, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x04, 0x1a,
	0x07, 0x9a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x1a, 0x07, 0x92, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x54,
	0x78, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x9a, 0x01,
	0x0a, 0x0b, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x54, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30,
	0x22, 0x4f, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x22, 0x16, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x34, 0x0a, 0x0d, 0x48, 0x61, 0x73,
	0x68, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x22,
	0x8a, 0x01, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x22, 0x5d, 0x0a, 0x0c,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x1a, 0x0a, 0x0f, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07,
	0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x21, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xb5,
	0x18, 0x03, 0x31, 0x2e, 0x36, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x07,
	0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x22, 0x8c, 0x02, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5,
	0x18, 0x03, 0x31, 0x2e, 0x30, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x03, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4a, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x6b, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x31, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x4b, 0x76, 0x12, 0x22, 0x0a, 0x08, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0x8a, 0xb5,
	0x18, 0x03, 0x31, 0x2e, 0x34, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x50, 0x55, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x07, 0x92, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x31, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x41, 0x0a, 0x12,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52, 0x07, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x22,
	0x1f, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34,
	0x22, 0xc1, 0x02, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34,
	0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x76, 0x63, 0x63, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x30, 0x22, 0x3e, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x30, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x2d,
	0x0a, 0x12, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x50, 0x0a,
	0x13, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22,
	0x4f, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x54, 0x54, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x54, 0x4c, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34,
	0x22, 0x5e, 0x0a, 0x16, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34,
	0x22, 0x54, 0x0a, 0x17, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82,
	0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x22, 0x30, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x3a,
	0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x75, 0x0a, 0x16, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22,
	0x45, 0x0a, 0x16, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x3a, 0x07, 0x82,
	0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x54, 0x54, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x54, 0x54, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x31, 0x22, 0x1d, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x33, 0x22, 0x26, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x22, 0x7f, 0x0a, 0x13, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x22, 0x98, 0x01, 0x0a, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x52, 0x4c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x34, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x3a, 0x07, 0x82,
	0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x5e, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x34, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x3a, 0x07, 0x82,
	0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x2e, 0x0a,
	0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x44, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x7d, 0x0a,
	0x14, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x4a, 0x0a, 0x13,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x3a,
	0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x31, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x22, 0x49, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x8a, 0xb5,
	0x18, 0x03, 0x31, 0x2e, 0x35, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x7b, 0x0a, 0x12,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x2f, 0x0a, 0x14, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x22, 0x7e, 0x0a, 0x15, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x22, 0x1c, 0x0a, 0x11, 0x44, 0x65,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a,
	0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x4f, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x38, 0x0a, 0x11, 0x4d, 0x6f, 0x76,
	0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x33, 0x22, 0x4f, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x33, 0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x22, 0x3d, 0x0a, 0x0b, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x07,
	0x92, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30,
	0x22, 0x5d, 0x0a, 0x0b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22,
	0x79, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x44,
	0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a,
	0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x1a, 0x07, 0x92, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x35, 0x3a,
	0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x35, 0x22, 0x68, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x35, 0x22, 0x18, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0xf7, 0x02, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x62, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x62, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x66,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x66,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x33, 0x0a, 0x10, 0x72, 0x61, 0x66, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x52, 0x10, 0x72, 0x61, 0x66, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x34, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x64,
	0x62, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x52, 0x0b, 0x64, 0x62, 0x53, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x34, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x3a, 0x07, 0x82,
	0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x1c, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x30, 0x22, 0x1d, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x30, 0x22, 0x1c, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x35, 0x22, 0x4e, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x34, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xb5,
	0x18, 0x03, 0x31, 0x2e, 0x35, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x31,
	0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x22, 0x34, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x07,
	0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x35, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x30, 0x22, 0x4b, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30,
	0x22, 0x4c, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x31,
	0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x22, 0x31, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x30, 0x22, 0x1e, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x30, 0x22, 0x1e, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x30, 0x22, 0x34, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x66, 0x0a, 0x1e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x30, 0x22, 0x6d, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x22, 0x4f, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31,
	0x2e, 0x30, 0x22, 0x50, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x30, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x07, 0x82, 0xb5, 0x18,
	0x03, 0x31, 0x2e, 0x35, 0x22, 0x67, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x50, 0x0a,
	0x13, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22,
	0x66, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x07,
	0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x53, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x5b, 0x0a, 0x1e,
	0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x56, 0x0a, 0x19, 0x41, 0x75, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e,
	0x30, 0x22, 0x57, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x50, 0x0a, 0x13, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x82, 0x01, 0x0a,
	0x13, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x07,
	0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x07, 0x8a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x52, 0x04, 0x70, 0x65, 0x72,
	0x6d, 0x22, 0x67, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x67, 0x0a, 0x14, 0x41, 0x75,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x07, 0x82, 0xb5, 0x18, 0x03,
	0x31, 0x2e, 0x30, 0x22, 0x53, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a,
	0x07, 0x82, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x5c, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82,
	0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x5d, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x07, 0x82, 0xb5,
	0x18, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x41, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x4f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x07, 0x43, 0x4f, 0x52,
	0x52, 0x55, 0x50, 0x54, 0x10, 0x02, 0x1a, 0x07, 0x9a, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x33, 0x1a,
	0x07, 0x92, 0xb5, 0x18, 0x03, 0x31, 0x2e, 0x30, 0x32, 0xbc, 0x03, 0x0a, 0x02, 0x4b, 0x56, 0x12,
	0x51, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x49, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a,
	0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x70, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x49, 0x0a, 0x03, 0x54, 0x78, 0x6e, 0x12,
	0x14, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x54, 0x78, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x74, 0x78, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1b,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x32, 0x5b, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x52, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x01, 0x2a,
	0x28, 0x01, 0x30, 0x01, 0x32, 0x85, 0x05, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22,
	0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x22,
	0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x95, 0x01, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x74, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x22, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x74,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x76, 0x2f, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x32, 0xc2, 0x04, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01,
	0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0a, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x32, 0xbe, 0x06, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x5a, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a,
	0x0a, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x64, 0x65, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x68, 0x61,
	0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x56, 0x12,
	0x17, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4b,
	0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x68, 0x61, 0x73, 0x68,
	0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x77, 0x0a,
	0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x09, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x3a,
	0x01, 0x2a, 0x32, 0x9d, 0x0f, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x67, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0a, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6f,
	0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x64, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65,
	0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61,
	0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70,
	0x77, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7c,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x07,
	0x52, 0x6f, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0x64, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x6f, 0x6c,
	0x65, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65,
	0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x76, 0x31, 0x2e,
	0x6b, 0x65, 0x79, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x65, 0x64,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x3a,
	0x01, 0x2a, 0x42, 0x3c, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x68, 0x6f, 0x6a, 0x70, 0x75, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79,
	0x65, 0x64, 0x3b, 0x6b, 0x65, 0x79, 0x65, 0x64, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_core_v1_keyed_rpc_proto_rawDescOnce sync.Once
	file_pkg_core_v1_keyed_rpc_proto_rawDescData = file_pkg_core_v1_keyed_rpc_proto_rawDesc
)

func file_pkg_core_v1_keyed_rpc_proto_rawDescGZIP() []byte {
	file_pkg_core_v1_keyed_rpc_proto_rawDescOnce.Do(func() {
		file_pkg_core_v1_keyed_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_core_v1_keyed_rpc_proto_rawDescData)
	})
	return file_pkg_core_v1_keyed_rpc_proto_rawDescData
}

var file_pkg_core_v1_keyed_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_pkg_core_v1_keyed_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 95)
var file_pkg_core_v1_keyed_rpc_proto_goTypes = []interface{}{
	(AlarmType)(0),                           // 0: v1.keyed.AlarmType
	(RangeRequest_SortOrder)(0),              // 1: v1.keyed.RangeRequest.SortOrder
	(RangeRequest_SortTarget)(0),             // 2: v1.keyed.RangeRequest.SortTarget
	(Compare_CompareResult)(0),               // 3: v1.keyed.Compare.CompareResult
	(Compare_CompareTarget)(0),               // 4: v1.keyed.Compare.CompareTarget
	(WatchCreateRequest_FilterType)(0),       // 5: v1.keyed.WatchCreateRequest.FilterType
	(AlarmRequest_AlarmAction)(0),            // 6: v1.keyed.AlarmRequest.AlarmAction
	(DowngradeRequest_DowngradeAction)(0),    // 7: v1.keyed.DowngradeRequest.DowngradeAction
	(*ResponseHeader)(nil),                   // 8: v1.keyed.ResponseHeader
	(*RangeRequest)(nil),                     // 9: v1.keyed.RangeRequest
	(*RangeResponse)(nil),                    // 10: v1.keyed.RangeResponse
	(*PutRequest)(nil),                       // 11: v1.keyed.PutRequest
	(*PutResponse)(nil),                      // 12: v1.keyed.PutResponse
	(*DeleteRangeRequest)(nil),               // 13: v1.keyed.DeleteRangeRequest
	(*DeleteRangeResponse)(nil),              // 14: v1.keyed.DeleteRangeResponse
	(*RequestOp)(nil),                        // 15: v1.keyed.RequestOp
	(*ResponseOp)(nil),                       // 16: v1.keyed.ResponseOp
	(*Compare)(nil),                          // 17: v1.keyed.Compare
	(*TxnRequest)(nil),                       // 18: v1.keyed.TxnRequest
	(*TxnResponse)(nil),                      // 19: v1.keyed.TxnResponse
	(*CompactionRequest)(nil),                // 20: v1.keyed.CompactionRequest
	(*CompactionResponse)(nil),               // 21: v1.keyed.CompactionResponse
	(*HashRequest)(nil),                      // 22: v1.keyed.HashRequest
	(*HashKVRequest)(nil),                    // 23: v1.keyed.HashKVRequest
	(*HashKVResponse)(nil),                   // 24: v1.keyed.HashKVResponse
	(*HashResponse)(nil),                     // 25: v1.keyed.HashResponse
	(*SnapshotRequest)(nil),                  // 26: v1.keyed.SnapshotRequest
	(*SnapshotResponse)(nil),                 // 27: v1.keyed.SnapshotResponse
	(*WatchRequest)(nil),                     // 28: v1.keyed.WatchRequest
	(*WatchCreateRequest)(nil),               // 29: v1.keyed.WatchCreateRequest
	(*WatchCancelRequest)(nil),               // 30: v1.keyed.WatchCancelRequest
	(*WatchProgressRequest)(nil),             // 31: v1.keyed.WatchProgressRequest
	(*WatchResponse)(nil),                    // 32: v1.keyed.WatchResponse
	(*LeaseGrantRequest)(nil),                // 33: v1.keyed.LeaseGrantRequest
	(*LeaseGrantResponse)(nil),               // 34: v1.keyed.LeaseGrantResponse
	(*LeaseRevokeRequest)(nil),               // 35: v1.keyed.LeaseRevokeRequest
	(*LeaseRevokeResponse)(nil),              // 36: v1.keyed.LeaseRevokeResponse
	(*LeaseCheckpoint)(nil),                  // 37: v1.keyed.LeaseCheckpoint
	(*LeaseCheckpointRequest)(nil),           // 38: v1.keyed.LeaseCheckpointRequest
	(*LeaseCheckpointResponse)(nil),          // 39: v1.keyed.LeaseCheckpointResponse
	(*LeaseKeepAliveRequest)(nil),            // 40: v1.keyed.LeaseKeepAliveRequest
	(*LeaseKeepAliveResponse)(nil),           // 41: v1.keyed.LeaseKeepAliveResponse
	(*LeaseTimeToLiveRequest)(nil),           // 42: v1.keyed.LeaseTimeToLiveRequest
	(*LeaseTimeToLiveResponse)(nil),          // 43: v1.keyed.LeaseTimeToLiveResponse
	(*LeaseLeasesRequest)(nil),               // 44: v1.keyed.LeaseLeasesRequest
	(*LeaseStatus)(nil),                      // 45: v1.keyed.LeaseStatus
	(*LeaseLeasesResponse)(nil),              // 46: v1.keyed.LeaseLeasesResponse
	(*Member)(nil),                           // 47: v1.keyed.Member
	(*MemberAddRequest)(nil),                 // 48: v1.keyed.MemberAddRequest
	(*MemberAddResponse)(nil),                // 49: v1.keyed.MemberAddResponse
	(*MemberRemoveRequest)(nil),              // 50: v1.keyed.MemberRemoveRequest
	(*MemberRemoveResponse)(nil),             // 51: v1.keyed.MemberRemoveResponse
	(*MemberUpdateRequest)(nil),              // 52: v1.keyed.MemberUpdateRequest
	(*MemberUpdateResponse)(nil),             // 53: v1.keyed.MemberUpdateResponse
	(*MemberListRequest)(nil),                // 54: v1.keyed.MemberListRequest
	(*MemberListResponse)(nil),               // 55: v1.keyed.MemberListResponse
	(*MemberPromoteRequest)(nil),             // 56: v1.keyed.MemberPromoteRequest
	(*MemberPromoteResponse)(nil),            // 57: v1.keyed.MemberPromoteResponse
	(*DefragmentRequest)(nil),                // 58: v1.keyed.DefragmentRequest
	(*DefragmentResponse)(nil),               // 59: v1.keyed.DefragmentResponse
	(*MoveLeaderRequest)(nil),                // 60: v1.keyed.MoveLeaderRequest
	(*MoveLeaderResponse)(nil),               // 61: v1.keyed.MoveLeaderResponse
	(*AlarmRequest)(nil),                     // 62: v1.keyed.AlarmRequest
	(*AlarmMember)(nil),                      // 63: v1.keyed.AlarmMember
	(*AlarmResponse)(nil),                    // 64: v1.keyed.AlarmResponse
	(*DowngradeRequest)(nil),                 // 65: v1.keyed.DowngradeRequest
	(*DowngradeResponse)(nil),                // 66: v1.keyed.DowngradeResponse
	(*StatusRequest)(nil),                    // 67: v1.keyed.StatusRequest
	(*StatusResponse)(nil),                   // 68: v1.keyed.StatusResponse
	(*AuthEnableRequest)(nil),                // 69: v1.keyed.AuthEnableRequest
	(*AuthDisableRequest)(nil),               // 70: v1.keyed.AuthDisableRequest
	(*AuthStatusRequest)(nil),                // 71: v1.keyed.AuthStatusRequest
	(*AuthenticateRequest)(nil),              // 72: v1.keyed.AuthenticateRequest
	(*AuthUserAddRequest)(nil),               // 73: v1.keyed.AuthUserAddRequest
	(*AuthUserGetRequest)(nil),               // 74: v1.keyed.AuthUserGetRequest
	(*AuthUserDeleteRequest)(nil),            // 75: v1.keyed.AuthUserDeleteRequest
	(*AuthUserChangePasswordRequest)(nil),    // 76: v1.keyed.AuthUserChangePasswordRequest
	(*AuthUserGrantRoleRequest)(nil),         // 77: v1.keyed.AuthUserGrantRoleRequest
	(*AuthUserRevokeRoleRequest)(nil),        // 78: v1.keyed.AuthUserRevokeRoleRequest
	(*AuthRoleAddRequest)(nil),               // 79: v1.keyed.AuthRoleAddRequest
	(*AuthRoleGetRequest)(nil),               // 80: v1.keyed.AuthRoleGetRequest
	(*AuthUserListRequest)(nil),              // 81: v1.keyed.AuthUserListRequest
	(*AuthRoleListRequest)(nil),              // 82: v1.keyed.AuthRoleListRequest
	(*AuthRoleDeleteRequest)(nil),            // 83: v1.keyed.AuthRoleDeleteRequest
	(*AuthRoleGrantPermissionRequest)(nil),   // 84: v1.keyed.AuthRoleGrantPermissionRequest
	(*AuthRoleRevokePermissionRequest)(nil),  // 85: v1.keyed.AuthRoleRevokePermissionRequest
	(*AuthEnableResponse)(nil),               // 86: v1.keyed.AuthEnableResponse
	(*AuthDisableResponse)(nil),              // 87: v1.keyed.AuthDisableResponse
	(*AuthStatusResponse)(nil),               // 88: v1.keyed.AuthStatusResponse
	(*AuthenticateResponse)(nil),             // 89: v1.keyed.AuthenticateResponse
	(*AuthUserAddResponse)(nil),              // 90: v1.keyed.AuthUserAddResponse
	(*AuthUserGetResponse)(nil),              // 91: v1.keyed.AuthUserGetResponse
	(*AuthUserDeleteResponse)(nil),           // 92: v1.keyed.AuthUserDeleteResponse
	(*AuthUserChangePasswordResponse)(nil),   // 93: v1.keyed.AuthUserChangePasswordResponse
	(*AuthUserGrantRoleResponse)(nil),        // 94: v1.keyed.AuthUserGrantRoleResponse
	(*AuthUserRevokeRoleResponse)(nil),       // 95: v1.keyed.AuthUserRevokeRoleResponse
	(*AuthRoleAddResponse)(nil),              // 96: v1.keyed.AuthRoleAddResponse
	(*AuthRoleGetResponse)(nil),              // 97: v1.keyed.AuthRoleGetResponse
	(*AuthRoleListResponse)(nil),             // 98: v1.keyed.AuthRoleListResponse
	(*AuthUserListResponse)(nil),             // 99: v1.keyed.AuthUserListResponse
	(*AuthRoleDeleteResponse)(nil),           // 100: v1.keyed.AuthRoleDeleteResponse
	(*AuthRoleGrantPermissionResponse)(nil),  // 101: v1.keyed.AuthRoleGrantPermissionResponse
	(*AuthRoleRevokePermissionResponse)(nil), // 102: v1.keyed.AuthRoleRevokePermissionResponse
	(*mvcc.KeyValue)(nil),                    // 103: v1.mvcc.KeyValue
	(*mvcc.Event)(nil),                       // 104: v1.mvcc.Event
	(*auth.UserAddOptions)(nil),              // 105: v1.auth.UserAddOptions
	(*auth.Permission)(nil),                  // 106: v1.auth.Permission
}
var file_pkg_core_v1_keyed_rpc_proto_depIdxs = []int32{
	1,   // 0: v1.keyed.RangeRequest.sort_order:type_name -> v1.keyed.RangeRequest.SortOrder
	2,   // 1: v1.keyed.RangeRequest.sort_target:type_name -> v1.keyed.RangeRequest.SortTarget
	8,   // 2: v1.keyed.RangeResponse.header:type_name -> v1.keyed.ResponseHeader
	103, // 3: v1.keyed.RangeResponse.kvs:type_name -> v1.mvcc.KeyValue
	8,   // 4: v1.keyed.PutResponse.header:type_name -> v1.keyed.ResponseHeader
	103, // 5: v1.keyed.PutResponse.prev_kv:type_name -> v1.mvcc.KeyValue
	8,   // 6: v1.keyed.DeleteRangeResponse.header:type_name -> v1.keyed.ResponseHeader
	103, // 7: v1.keyed.DeleteRangeResponse.prev_kvs:type_name -> v1.mvcc.KeyValue
	9,   // 8: v1.keyed.RequestOp.request_range:type_name -> v1.keyed.RangeRequest
	11,  // 9: v1.keyed.RequestOp.request_put:type_name -> v1.keyed.PutRequest
	13,  // 10: v1.keyed.RequestOp.request_delete_range:type_name -> v1.keyed.DeleteRangeRequest
	18,  // 11: v1.keyed.RequestOp.request_txn:type_name -> v1.keyed.TxnRequest
	10,  // 12: v1.keyed.ResponseOp.response_range:type_name -> v1.keyed.RangeResponse
	12,  // 13: v1.keyed.ResponseOp.response_put:type_name -> v1.keyed.PutResponse
	14,  // 14: v1.keyed.ResponseOp.response_delete_range:type_name -> v1.keyed.DeleteRangeResponse
	19,  // 15: v1.keyed.ResponseOp.response_txn:type_name -> v1.keyed.TxnResponse
	3,   // 16: v1.keyed.Compare.result:type_name -> v1.keyed.Compare.CompareResult
	4,   // 17: v1.keyed.Compare.target:type_name -> v1.keyed.Compare.CompareTarget
	17,  // 18: v1.keyed.TxnRequest.compare:type_name -> v1.keyed.Compare
	15,  // 19: v1.keyed.TxnRequest.success:type_name -> v1.keyed.RequestOp
	15,  // 20: v1.keyed.TxnRequest.failure:type_name -> v1.keyed.RequestOp
	8,   // 21: v1.keyed.TxnResponse.header:type_name -> v1.keyed.ResponseHeader
	16,  // 22: v1.keyed.TxnResponse.responses:type_name -> v1.keyed.ResponseOp
	8,   // 23: v1.keyed.CompactionResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 24: v1.keyed.HashKVResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 25: v1.keyed.HashResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 26: v1.keyed.SnapshotResponse.header:type_name -> v1.keyed.ResponseHeader
	29,  // 27: v1.keyed.WatchRequest.create_request:type_name -> v1.keyed.WatchCreateRequest
	30,  // 28: v1.keyed.WatchRequest.cancel_request:type_name -> v1.keyed.WatchCancelRequest
	31,  // 29: v1.keyed.WatchRequest.progress_request:type_name -> v1.keyed.WatchProgressRequest
	5,   // 30: v1.keyed.WatchCreateRequest.filters:type_name -> v1.keyed.WatchCreateRequest.FilterType
	8,   // 31: v1.keyed.WatchResponse.header:type_name -> v1.keyed.ResponseHeader
	104, // 32: v1.keyed.WatchResponse.events:type_name -> v1.mvcc.Event
	8,   // 33: v1.keyed.LeaseGrantResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 34: v1.keyed.LeaseRevokeResponse.header:type_name -> v1.keyed.ResponseHeader
	37,  // 35: v1.keyed.LeaseCheckpointRequest.checkpoints:type_name -> v1.keyed.LeaseCheckpoint
	8,   // 36: v1.keyed.LeaseCheckpointResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 37: v1.keyed.LeaseKeepAliveResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 38: v1.keyed.LeaseTimeToLiveResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 39: v1.keyed.LeaseLeasesResponse.header:type_name -> v1.keyed.ResponseHeader
	45,  // 40: v1.keyed.LeaseLeasesResponse.leases:type_name -> v1.keyed.LeaseStatus
	8,   // 41: v1.keyed.MemberAddResponse.header:type_name -> v1.keyed.ResponseHeader
	47,  // 42: v1.keyed.MemberAddResponse.member:type_name -> v1.keyed.Member
	47,  // 43: v1.keyed.MemberAddResponse.members:type_name -> v1.keyed.Member
	8,   // 44: v1.keyed.MemberRemoveResponse.header:type_name -> v1.keyed.ResponseHeader
	47,  // 45: v1.keyed.MemberRemoveResponse.members:type_name -> v1.keyed.Member
	8,   // 46: v1.keyed.MemberUpdateResponse.header:type_name -> v1.keyed.ResponseHeader
	47,  // 47: v1.keyed.MemberUpdateResponse.members:type_name -> v1.keyed.Member
	8,   // 48: v1.keyed.MemberListResponse.header:type_name -> v1.keyed.ResponseHeader
	47,  // 49: v1.keyed.MemberListResponse.members:type_name -> v1.keyed.Member
	8,   // 50: v1.keyed.MemberPromoteResponse.header:type_name -> v1.keyed.ResponseHeader
	47,  // 51: v1.keyed.MemberPromoteResponse.members:type_name -> v1.keyed.Member
	8,   // 52: v1.keyed.DefragmentResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 53: v1.keyed.MoveLeaderResponse.header:type_name -> v1.keyed.ResponseHeader
	6,   // 54: v1.keyed.AlarmRequest.action:type_name -> v1.keyed.AlarmRequest.AlarmAction
	0,   // 55: v1.keyed.AlarmRequest.alarm:type_name -> v1.keyed.AlarmType
	0,   // 56: v1.keyed.AlarmMember.alarm:type_name -> v1.keyed.AlarmType
	8,   // 57: v1.keyed.AlarmResponse.header:type_name -> v1.keyed.ResponseHeader
	63,  // 58: v1.keyed.AlarmResponse.alarms:type_name -> v1.keyed.AlarmMember
	7,   // 59: v1.keyed.DowngradeRequest.action:type_name -> v1.keyed.DowngradeRequest.DowngradeAction
	8,   // 60: v1.keyed.DowngradeResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 61: v1.keyed.StatusResponse.header:type_name -> v1.keyed.ResponseHeader
	105, // 62: v1.keyed.AuthUserAddRequest.options:type_name -> v1.auth.UserAddOptions
	106, // 63: v1.keyed.AuthRoleGrantPermissionRequest.perm:type_name -> v1.auth.Permission
	8,   // 64: v1.keyed.AuthEnableResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 65: v1.keyed.AuthDisableResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 66: v1.keyed.AuthStatusResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 67: v1.keyed.AuthenticateResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 68: v1.keyed.AuthUserAddResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 69: v1.keyed.AuthUserGetResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 70: v1.keyed.AuthUserDeleteResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 71: v1.keyed.AuthUserChangePasswordResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 72: v1.keyed.AuthUserGrantRoleResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 73: v1.keyed.AuthUserRevokeRoleResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 74: v1.keyed.AuthRoleAddResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 75: v1.keyed.AuthRoleGetResponse.header:type_name -> v1.keyed.ResponseHeader
	106, // 76: v1.keyed.AuthRoleGetResponse.perm:type_name -> v1.auth.Permission
	8,   // 77: v1.keyed.AuthRoleListResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 78: v1.keyed.AuthUserListResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 79: v1.keyed.AuthRoleDeleteResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 80: v1.keyed.AuthRoleGrantPermissionResponse.header:type_name -> v1.keyed.ResponseHeader
	8,   // 81: v1.keyed.AuthRoleRevokePermissionResponse.header:type_name -> v1.keyed.ResponseHeader
	9,   // 82: v1.keyed.KV.Range:input_type -> v1.keyed.RangeRequest
	11,  // 83: v1.keyed.KV.Put:input_type -> v1.keyed.PutRequest
	13,  // 84: v1.keyed.KV.DeleteRange:input_type -> v1.keyed.DeleteRangeRequest
	18,  // 85: v1.keyed.KV.Txn:input_type -> v1.keyed.TxnRequest
	20,  // 86: v1.keyed.KV.Compact:input_type -> v1.keyed.CompactionRequest
	28,  // 87: v1.keyed.Watch.Watch:input_type -> v1.keyed.WatchRequest
	33,  // 88: v1.keyed.Lease.LeaseGrant:input_type -> v1.keyed.LeaseGrantRequest
	35,  // 89: v1.keyed.Lease.LeaseRevoke:input_type -> v1.keyed.LeaseRevokeRequest
	40,  // 90: v1.keyed.Lease.LeaseKeepAlive:input_type -> v1.keyed.LeaseKeepAliveRequest
	42,  // 91: v1.keyed.Lease.LeaseTimeToLive:input_type -> v1.keyed.LeaseTimeToLiveRequest
	44,  // 92: v1.keyed.Lease.LeaseLeases:input_type -> v1.keyed.LeaseLeasesRequest
	48,  // 93: v1.keyed.Cluster.MemberAdd:input_type -> v1.keyed.MemberAddRequest
	50,  // 94: v1.keyed.Cluster.MemberRemove:input_type -> v1.keyed.MemberRemoveRequest
	52,  // 95: v1.keyed.Cluster.MemberUpdate:input_type -> v1.keyed.MemberUpdateRequest
	54,  // 96: v1.keyed.Cluster.MemberList:input_type -> v1.keyed.MemberListRequest
	56,  // 97: v1.keyed.Cluster.MemberPromote:input_type -> v1.keyed.MemberPromoteRequest
	62,  // 98: v1.keyed.Maintenance.Alarm:input_type -> v1.keyed.AlarmRequest
	67,  // 99: v1.keyed.Maintenance.Status:input_type -> v1.keyed.StatusRequest
	58,  // 100: v1.keyed.Maintenance.Defragment:input_type -> v1.keyed.DefragmentRequest
	22,  // 101: v1.keyed.Maintenance.Hash:input_type -> v1.keyed.HashRequest
	23,  // 102: v1.keyed.Maintenance.HashKV:input_type -> v1.keyed.HashKVRequest
	26,  // 103: v1.keyed.Maintenance.Snapshot:input_type -> v1.keyed.SnapshotRequest
	60,  // 104: v1.keyed.Maintenance.MoveLeader:input_type -> v1.keyed.MoveLeaderRequest
	65,  // 105: v1.keyed.Maintenance.Downgrade:input_type -> v1.keyed.DowngradeRequest
	69,  // 106: v1.keyed.Auth.AuthEnable:input_type -> v1.keyed.AuthEnableRequest
	70,  // 107: v1.keyed.Auth.AuthDisable:input_type -> v1.keyed.AuthDisableRequest
	71,  // 108: v1.keyed.Auth.AuthStatus:input_type -> v1.keyed.AuthStatusRequest
	72,  // 109: v1.keyed.Auth.Authenticate:input_type -> v1.keyed.AuthenticateRequest
	73,  // 110: v1.keyed.Auth.UserAdd:input_type -> v1.keyed.AuthUserAddRequest
	74,  // 111: v1.keyed.Auth.UserGet:input_type -> v1.keyed.AuthUserGetRequest
	81,  // 112: v1.keyed.Auth.UserList:input_type -> v1.keyed.AuthUserListRequest
	75,  // 113: v1.keyed.Auth.UserDelete:input_type -> v1.keyed.AuthUserDeleteRequest
	76,  // 114: v1.keyed.Auth.UserChangePassword:input_type -> v1.keyed.AuthUserChangePasswordRequest
	77,  // 115: v1.keyed.Auth.UserGrantRole:input_type -> v1.keyed.AuthUserGrantRoleRequest
	78,  // 116: v1.keyed.Auth.UserRevokeRole:input_type -> v1.keyed.AuthUserRevokeRoleRequest
	79,  // 117: v1.keyed.Auth.RoleAdd:input_type -> v1.keyed.AuthRoleAddRequest
	80,  // 118: v1.keyed.Auth.RoleGet:input_type -> v1.keyed.AuthRoleGetRequest
	82,  // 119: v1.keyed.Auth.RoleList:input_type -> v1.keyed.AuthRoleListRequest
	83,  // 120: v1.keyed.Auth.RoleDelete:input_type -> v1.keyed.AuthRoleDeleteRequest
	84,  // 121: v1.keyed.Auth.RoleGrantPermission:input_type -> v1.keyed.AuthRoleGrantPermissionRequest
	85,  // 122: v1.keyed.Auth.RoleRevokePermission:input_type -> v1.keyed.AuthRoleRevokePermissionRequest
	10,  // 123: v1.keyed.KV.Range:output_type -> v1.keyed.RangeResponse
	12,  // 124: v1.keyed.KV.Put:output_type -> v1.keyed.PutResponse
	14,  // 125: v1.keyed.KV.DeleteRange:output_type -> v1.keyed.DeleteRangeResponse
	19,  // 126: v1.keyed.KV.Txn:output_type -> v1.keyed.TxnResponse
	21,  // 127: v1.keyed.KV.Compact:output_type -> v1.keyed.CompactionResponse
	32,  // 128: v1.keyed.Watch.Watch:output_type -> v1.keyed.WatchResponse
	34,  // 129: v1.keyed.Lease.LeaseGrant:output_type -> v1.keyed.LeaseGrantResponse
	36,  // 130: v1.keyed.Lease.LeaseRevoke:output_type -> v1.keyed.LeaseRevokeResponse
	41,  // 131: v1.keyed.Lease.LeaseKeepAlive:output_type -> v1.keyed.LeaseKeepAliveResponse
	43,  // 132: v1.keyed.Lease.LeaseTimeToLive:output_type -> v1.keyed.LeaseTimeToLiveResponse
	46,  // 133: v1.keyed.Lease.LeaseLeases:output_type -> v1.keyed.LeaseLeasesResponse
	49,  // 134: v1.keyed.Cluster.MemberAdd:output_type -> v1.keyed.MemberAddResponse
	51,  // 135: v1.keyed.Cluster.MemberRemove:output_type -> v1.keyed.MemberRemoveResponse
	53,  // 136: v1.keyed.Cluster.MemberUpdate:output_type -> v1.keyed.MemberUpdateResponse
	55,  // 137: v1.keyed.Cluster.MemberList:output_type -> v1.keyed.MemberListResponse
	57,  // 138: v1.keyed.Cluster.MemberPromote:output_type -> v1.keyed.MemberPromoteResponse
	64,  // 139: v1.keyed.Maintenance.Alarm:output_type -> v1.keyed.AlarmResponse
	68,  // 140: v1.keyed.Maintenance.Status:output_type -> v1.keyed.StatusResponse
	59,  // 141: v1.keyed.Maintenance.Defragment:output_type -> v1.keyed.DefragmentResponse
	25,  // 142: v1.keyed.Maintenance.Hash:output_type -> v1.keyed.HashResponse
	24,  // 143: v1.keyed.Maintenance.HashKV:output_type -> v1.keyed.HashKVResponse
	27,  // 144: v1.keyed.Maintenance.Snapshot:output_type -> v1.keyed.SnapshotResponse
	61,  // 145: v1.keyed.Maintenance.MoveLeader:output_type -> v1.keyed.MoveLeaderResponse
	66,  // 146: v1.keyed.Maintenance.Downgrade:output_type -> v1.keyed.DowngradeResponse
	86,  // 147: v1.keyed.Auth.AuthEnable:output_type -> v1.keyed.AuthEnableResponse
	87,  // 148: v1.keyed.Auth.AuthDisable:output_type -> v1.keyed.AuthDisableResponse
	88,  // 149: v1.keyed.Auth.AuthStatus:output_type -> v1.keyed.AuthStatusResponse
	89,  // 150: v1.keyed.Auth.Authenticate:output_type -> v1.keyed.AuthenticateResponse
	90,  // 151: v1.keyed.Auth.UserAdd:output_type -> v1.keyed.AuthUserAddResponse
	91,  // 152: v1.keyed.Auth.UserGet:output_type -> v1.keyed.AuthUserGetResponse
	99,  // 153: v1.keyed.Auth.UserList:output_type -> v1.keyed.AuthUserListResponse
	92,  // 154: v1.keyed.Auth.UserDelete:output_type -> v1.keyed.AuthUserDeleteResponse
	93,  // 155: v1.keyed.Auth.UserChangePassword:output_type -> v1.keyed.AuthUserChangePasswordResponse
	94,  // 156: v1.keyed.Auth.UserGrantRole:output_type -> v1.keyed.AuthUserGrantRoleResponse
	95,  // 157: v1.keyed.Auth.UserRevokeRole:output_type -> v1.keyed.AuthUserRevokeRoleResponse
	96,  // 158: v1.keyed.Auth.RoleAdd:output_type -> v1.keyed.AuthRoleAddResponse
	97,  // 159: v1.keyed.Auth.RoleGet:output_type -> v1.keyed.AuthRoleGetResponse
	98,  // 160: v1.keyed.Auth.RoleList:output_type -> v1.keyed.AuthRoleListResponse
	100, // 161: v1.keyed.Auth.RoleDelete:output_type -> v1.keyed.AuthRoleDeleteResponse
	101, // 162: v1.keyed.Auth.RoleGrantPermission:output_type -> v1.keyed.AuthRoleGrantPermissionResponse
	102, // 163: v1.keyed.Auth.RoleRevokePermission:output_type -> v1.keyed.AuthRoleRevokePermissionResponse
	123, // [123:164] is the sub-list for method output_type
	82,  // [82:123] is the sub-list for method input_type
	82,  // [82:82] is the sub-list for extension type_name
	82,  // [82:82] is the sub-list for extension extendee
	0,   // [0:82] is the sub-list for field type_name
}

func init() { file_pkg_core_v1_keyed_rpc_proto_init() }
func file_pkg_core_v1_keyed_rpc_proto_init() {
	if File_pkg_core_v1_keyed_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashKVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashKVResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseRevokeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseRevokeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseCheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseKeepAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseKeepAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseTimeToLiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseTimeToLiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseLeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseLeasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberPromoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberPromoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefragmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefragmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveLeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveLeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DowngradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DowngradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthDisableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserGrantRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserRevokeRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleGrantPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleRevokePermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthEnableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthDisableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserChangePasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserGrantRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserRevokeRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthUserListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleGrantPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_core_v1_keyed_rpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRoleRevokePermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_core_v1_keyed_rpc_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RequestOp_RequestRange)(nil),
		(*RequestOp_RequestPut)(nil),
		(*RequestOp_RequestDeleteRange)(nil),
		(*RequestOp_RequestTxn)(nil),
	}
	file_pkg_core_v1_keyed_rpc_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ResponseOp_ResponseRange)(nil),
		(*ResponseOp_ResponsePut)(nil),
		(*ResponseOp_ResponseDeleteRange)(nil),
		(*ResponseOp_ResponseTxn)(nil),
	}
	file_pkg_core_v1_keyed_rpc_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Compare_Version)(nil),
		(*Compare_CreateRevision)(nil),
		(*Compare_ModRevision)(nil),
		(*Compare_Value)(nil),
		(*Compare_Lease)(nil),
	}
	file_pkg_core_v1_keyed_rpc_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*WatchRequest_CreateRequest)(nil),
		(*WatchRequest_CancelRequest)(nil),
		(*WatchRequest_ProgressRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_core_v1_keyed_rpc_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   95,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_pkg_core_v1_keyed_rpc_proto_goTypes,
		DependencyIndexes: file_pkg_core_v1_keyed_rpc_proto_depIdxs,
		EnumInfos:         file_pkg_core_v1_keyed_rpc_proto_enumTypes,
		MessageInfos:      file_pkg_core_v1_keyed_rpc_proto_msgTypes,
	}.Build()
	File_pkg_core_v1_keyed_rpc_proto = out.File
	file_pkg_core_v1_keyed_rpc_proto_rawDesc = nil
	file_pkg_core_v1_keyed_rpc_proto_goTypes = nil
	file_pkg_core_v1_keyed_rpc_proto_depIdxs = nil
}
