syntax = "proto3";

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package v1.registry;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "registry.Client.Autogen.Grpc";
option java_outer_classname = "RegistryProtos";
option java_package = "net.bhojpur.service";
option go_package = "github.com/bhojpur/service/pkg/core/v1/registry;registry";

message NetworkService {
    string name = 1;
    string payload = 2;
    repeated Match matches = 3;
}

message Match {
    map<string, string> source_selector = 1;
    repeated Destination routes = 2;
    bool fallthrough = 3;
    Metadata metadata = 4;
}

message Metadata {
    map<string, string> labels = 1;
}

message Destination {
    map<string, string> destination_selector = 1;
    uint32 weight = 2;
}

message NetworkServiceLabels {
    map<string, string> labels = 1;
}

message NetworkServiceEndpoint {
    string name = 1;
    repeated string network_service_names = 2;
    map<string, NetworkServiceLabels> network_service_labels = 3;
    string url = 4;
    google.protobuf.Timestamp expiration_time = 5;
    google.protobuf.Timestamp initial_registration_time = 6;
}

service NetworkServiceEndpointRegistry {
    rpc Register (NetworkServiceEndpoint) returns (NetworkServiceEndpoint);
    rpc Find (NetworkServiceEndpointQuery) returns (stream NetworkServiceEndpointResponse);
    rpc Unregister (NetworkServiceEndpoint) returns (google.protobuf.Empty);
}

service NetworkServiceRegistry {
    rpc Register (NetworkService) returns (NetworkService);
    rpc Find (NetworkServiceQuery) returns (stream NetworkServiceResponse);
    rpc Unregister (NetworkService) returns (google.protobuf.Empty);
}

message NetworkServiceQuery {
    NetworkService network_service = 1;
    bool watch = 2;
}

message NetworkServiceEndpointQuery {
    NetworkServiceEndpoint network_service_endpoint = 1;
    bool watch = 2;
}

message NetworkServiceResponse {
    NetworkService network_service = 1;
    bool deleted = 2;
}

message NetworkServiceEndpointResponse {
    NetworkServiceEndpoint network_service_endpoint = 1;
    bool deleted = 2;
}